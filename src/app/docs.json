{
  "structure": [
    {
      "originalPath": "1. Release Note",
      "name": "Release Note",
      "path": "release-note",
      "type": "folder",
      "children": [
        {
          "originalPath": "tsfsd.md",
          "id": 1,
          "name": "Tsfsd",
          "type": "file",
          "path": "release-note/tsfsd",
          "content": "tsrfc\r\nInstallation\r\nConfiguration\r\nLogger Function\r\n"
        }
      ]
    },
    {
      "originalPath": "2. Need to know.md",
      "id": 2,
      "name": "Need To Know",
      "type": "file",
      "path": "need-to-know",
      "content": "\r\n## Compatibility\r\n\r\n- params (`:id`)\r\n- wildcard (`/*path` or `/*`)\r\n- optional params (`/:id?`)\r\n\r\n### 1. Router\r\n\r\n- not support directly wildcard and optional params. (use `basePath` ‚úÖ)\r\n\r\n```ts\r\nconst account = new Router<CustomContext>({\r\n    basePath: '/account/:role?'\r\n});\r\n  ```\r\n\r\n### 2. Overwritten router (method)\r\n\r\n- Method will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n- not found Handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n```ts\r\n// ‚ùå Conflicting routes \r\n// ‚ùì Will be overwritten by the last handler.\r\n// Output: {name: \"Jhon\"}\r\nserver.get(\"/users/:id\", handleUser);\r\nserver.get(\"/users/:name\", handleByName); // Will execute be reached\r\n\r\n// ‚úÖ Solution: Use distinct paths\r\nserver.get(\"/users/id/:id\", handleUser);\r\nserver.get(\"/users/name/:name\", handleByName);\r\n```\r\n\r\n### 3. Matching Priority\r\n\r\nRoutes are matched with following priority order:\r\n\r\n1. Static paths (`/users/list`)\r\n2. Named parameters (`/users/:id`)\r\n3. Wildcard parameters (`/users/*`)\r\n4. Optional parameters (`/users/:id?`)\r\n"
    },
    {
      "originalPath": "3. Getting Started",
      "name": "Getting Started",
      "path": "getting-started",
      "type": "folder",
      "children": [
        {
          "originalPath": "1. Installation.md",
          "id": 3,
          "name": "Installation",
          "type": "file",
          "path": "getting-started/installation",
          "content": ""
        },
        {
          "originalPath": "2. Configuration.md",
          "id": 4,
          "name": "Configuration",
          "type": "file",
          "path": "getting-started/configuration",
          "content": ""
        },
        {
          "originalPath": "6. Node.md",
          "id": 5,
          "name": "Node",
          "type": "file",
          "path": "getting-started/node",
          "content": ""
        },
        {
          "originalPath": "7. Bun.md",
          "id": 6,
          "name": "Bun",
          "type": "file",
          "path": "getting-started/bun",
          "content": ""
        },
        {
          "originalPath": "8. Deno.md",
          "id": 7,
          "name": "Deno",
          "type": "file",
          "path": "getting-started/deno",
          "content": ""
        }
      ]
    },
    {
      "originalPath": "5. API",
      "name": "API",
      "path": "api",
      "type": "folder",
      "children": [
        {
          "originalPath": "0. Middleware API",
          "name": "Middleware API",
          "path": "api/0-middleware-api",
          "type": "folder",
          "children": [
            {
              "originalPath": "middleware settings.md",
              "id": 8,
              "name": "Middleware Settings",
              "type": "file",
              "path": "api/middleware-api/middleware-settings",
              "content": "Here‚Äôs a refined version of `GlobalConfig` to handle both **chaining middleware** and **skipping group middleware**:  \r\n\r\n```typescript\r\nexport let GlobalConfig = class {\r\n    static middlewareExecuteType: \"chaining\" | \"skip-group\" = \"chaining\"; \r\n    static env: Record<string, string | number> = {}; \r\n\r\n    static setMiddlewareExecution(type: \"chaining\" | \"skip-group\") {\r\n        this.middlewareExecuteType = type;\r\n    }\r\n\r\n    static getMiddlewareExecution(): \"chaining\" | \"skip-group\" {\r\n        return this.middlewareExecuteType;\r\n    }\r\n\r\n    static shouldExecuteGroupMiddleware(): boolean {\r\n        return this.middlewareExecuteType === \"chaining\"; // Executes group middleware only if in chaining mode\r\n    }\r\n};\r\n```\r\n\r\n---\r\n\r\n### **How This Works**\r\n\r\n- **`chaining` Mode**:  \r\n  - Parent middleware + group middleware + route middleware all execute.  \r\n- **`skip-group` Mode**:  \r\n  - Skips **group middleware** and directly executes route middleware.  \r\n- **`shouldExecuteGroupMiddleware()`**  \r\n  - Returns `true` if middleware execution is in **chaining** mode.  \r\n  - Returns `false` if **group middleware should be skipped**.  \r\n\r\n---\r\n\r\n#### **Example Execution Based on Mode**\r\n\r\n‚úÖ **For `/api/admin/settings` with `chaining`:**\r\n\r\n1. Parent middleware (`/api`)  \r\n2. Group middleware (`/api/admin`)  \r\n3. Route middleware (`/api/admin/settings`)  \r\n\r\n‚ùå **For `/api/admin/settings` with `skip-group`:**\r\n\r\n1. Parent middleware (`/api`)  \r\n2. üö´ Skips **group middleware** (`/api/admin`)  \r\n3. Route middleware (`/api/admin/settings`)  \r\n\r\nWould you like a function that dynamically decides which middlewares to apply? üöÄ\r\nstatic middlewareStrategy: \"inherit\" | \"isolated\" = \"inherit\";\r\n"
            },
            {
              "originalPath": "middleware.md",
              "id": 9,
              "name": "Middleware",
              "type": "file",
              "path": "api/middleware-api/middleware",
              "content": "\r\n### `use(...args)`\r\n\r\n**Flexible middleware registration**\r\n\r\n### **2. Middleware Guidelines**\r\n\r\n```ts\r\n// Good practice - fail fast\r\nserver.use((ctx, next) => {\r\n  if (!ctx.headers.get('x-api-key')) {\r\n    return ctx.status(401);\r\n  }\r\n  return next();\r\n});\r\n\r\n// Error handling\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (error) {\r\n    ctx.status(500).json({ error: error.message });\r\n  }\r\n});\r\n```\r\n\r\n### **3. Performance Tips**\r\n\r\n- **Lazy-load** heavy middleware after path matching\r\n- **Limit** deep nesting (max 3 levels recommended)\r\n- **Cache** frequent route parameters\r\n- **Prefer** sync middleware for simple operations\r\n\r\n---\r\n\r\n## **Error Handling**\r\n\r\n### **Centralized Error Management**\r\n\r\n```ts\r\n// Global error handler\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (error) {\r\n    ctx.status(500).json({\r\n      code: 'INTERNAL_ERROR',\r\n      message: process.env.NODE_ENV === 'prod' \r\n        ? 'Something went wrong' \r\n        : error.message\r\n    });\r\n  }\r\n});\r\n\r\n// Route-specific error handling\r\nserver.get('/danger', async (ctx) => {\r\n  try {\r\n    await riskyOperation();\r\n  } catch (error) {\r\n    ctx.status(400).json({ error: 'Safe error message' });\r\n  }\r\n});\r\n```\r\n\r\n**Signatures:**\r\n\r\n```typescript\r\n// Global middleware\r\nuse(middleware: MiddlewareType)\r\n\r\n// Path-scoped middleware\r\nuse(path: string, middleware: MiddlewareType)\r\n\r\n// Multiple middlewares\r\nuse(path: string, middlewares: MiddlewareType[])\r\n\r\n// With sub-router\r\nuse(path: string, middleware: MiddlewareType, router: Router)\r\n```\r\n\r\n**Middleware Types:**\r\n\r\n```typescript\r\ntype MiddlewareType = (\r\n  ctx: Context,\r\n  next: () => Promise<void>\r\n) => Promise<void> | void;\r\n```\r\n\r\n---\r\n\r\n## Middleware System\r\n\r\n### Lifecycle\r\n\r\n1. Incoming Request\r\n2. Global Middlewares\r\n3. Path-matched Middlewares\r\n4. Route Handler\r\n5. Response Middlewares\r\n6. Error Middlewares (if needed)\r\n\r\n### Error Handling\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (err) {\r\n    ctx.status(500).json({ error: err.message });\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Examples\r\n\r\n### Basic Routing\r\n\r\n```typescript\r\nserver.get('/', (ctx) => ctx.text('Home'));\r\nserver.post('/users', createUser);\r\n```\r\n\r\n### Middleware Chain\r\n\r\n```typescript\r\nserver.use(logger);\r\n\r\nserver.use('/admin', (ctx, next) => {\r\n  if (!ctx.user.isAdmin) ctx.throw(403);\r\n  return next();\r\n});\r\n\r\nserver.get('/admin/dashboard', adminDashboard);\r\n```\r\n\r\n### Route Grouping\r\n\r\n```typescript\r\nserver.group('/api', (api) => {\r\n  api.group('/v1', (v1) => {\r\n    v1.get('/users', getUsersV1);\r\n  });\r\n  \r\n  api.group('/v2', (v2) => {\r\n    v2.get('/users', getUsersV2);\r\n  });\r\n});\r\n```\r\n\r\n### Sub-router Mounting\r\n\r\n```typescript\r\nconst authRouter = new Router();\r\nauthRouter.post('/login', loginHandler);\r\nauthRouter.post('/register', registerHandler);\r\n\r\nserver.use('/auth', [rateLimiter], authRouter);\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Organize Routes**\r\n\r\n```text\r\n/src\r\n  /routes\r\n    auth.ts\r\n    users.ts\r\n    admin/\r\n      index.ts\r\n      audit.ts\r\n```\r\n\r\n2. **Middleware Order**\r\n\r\n```typescript\r\n// Global first\r\nserver.use(cors());\r\nserver.use(bodyParser());\r\n\r\n// Then specific routes\r\nserver.post('/upload', fileUpload, uploadHandler);\r\n\r\n// Error handlers last\r\nserver.use(errorFormatter);\r\n```\r\n\r\n3. **Performance Tips**\r\n\r\n- Avoid blocking sync operations in middleware\r\n- Cache expensive operations\r\n- Use route-specific middleware when possible\r\n\r\n---\r\n\r\n## Error Handling\r\n\r\n### Custom Error Middleware\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (err) {\r\n    ctx.status(err.statusCode || 500);\r\n    ctx.json({\r\n      error: err.message,\r\n      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Troubleshooting\r\n\r\n### Common Issues\r\n\r\n**Middleware Not Executing**\r\n\r\n- Check registration order\r\n- Verify path matches\r\n- Ensure `next()` is called\r\n\r\n**Route Conflicts**\r\n\r\n- More specific routes first\r\n- Use `server.all()` carefully\r\n- Check sub-router mounting points\r\n\r\n**Type Errors**\r\n\r\n- Use generics for context typing:\r\n\r\n```typescript\r\ninterface AppContext {\r\n  user: User;\r\n  cache: Cache;\r\n}\r\n\r\nconst app = new Router<AppContext>();\r\n```\r\n\r\n---\r\n\r\n## TypeScript Support\r\n\r\n### Key Interfaces\r\n\r\n```typescript\r\ninterface RouterOptions {\r\n  basePath?: string;\r\n  env?: Record<string, unknown>;\r\n  onError?: ErrorHandler;\r\n}\r\n\r\ntype MiddlewareType<T = any> = (\r\n  ctx: Context<T>,\r\n  next: () => Promise<void>\r\n) => Promise<void> | void;\r\n\r\ntype HTTPMethod = \r\n  | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\r\n  | 'OPTIONS' | 'HEAD' | 'ALL';\r\n```\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\nThis router system provides:\r\n\r\n- ‚úÖ Nested route organization\r\n- ‚úÖ Flexible middleware system\r\n- ‚úÖ Type-safe development\r\n- ‚úÖ Enterprise-scale capabilities\r\n\r\nAlways follow these patterns for best results:\r\n\r\n1. Organize routes hierarchically\r\n2. Keep middleware focused\r\n3. Use TypeScript interfaces\r\n4. Handle errors centrally\r\n"
            }
          ]
        },
        {
          "originalPath": "1. Router",
          "name": "Router",
          "path": "api/1-router",
          "type": "folder",
          "children": [
            {
              "originalPath": "2. Router.md",
              "id": 10,
              "name": "Router",
              "type": "file",
              "path": "api/router/router",
              "content": "\r\n# Router API\r\n\r\n---\r\n\r\n## **Core Concepts**\r\n\r\n### **1. Router Class**\r\n\r\n**Hierarchical routing system with middleware support**\r\n\r\n| Feature              | Description                                                                 |\r\n|----------------------|-----------------------------------------------------------------------------|\r\n| **Nested Routing**   | Mount sub-routers with path prefixes                                        |\r\n| **Middleware Chain** | Sequential execution of pre/post processors                                 |\r\n| **Path Isolation**   | Routes inherit parent path prefix                                           |\r\n| **Type Propagation** | Maintain typed context through nested routers                               |\r\n\r\n---\r\n\r\n### **2. Middleware System**\r\n\r\n#### **Execution Flow**\r\n\r\n```js\r\ngraph TD\r\n  A[Request] --> B[Parent Middleware]\r\n  B --> C[Router Middleware]\r\n  C --> D[Route Middleware]\r\n  D --> E[Handler]\r\n  E --> F[Post Middleware]\r\n  F --> G[Response]\r\n```\r\n\r\n---\r\n\r\n### **2. Route Groups**\r\n\r\n#### Logical grouping of routes with shared configuration\r\n\r\n```ts\r\napp.group('/admin', (group) => {\r\n  // Shared middleware for admin routes\r\n  group.use(adminAuth, auditLogger);\r\n  \r\n  group.get('/users', getAdminUsers);\r\n  group.post('/config', updateConfig);\r\n});\r\n```\r\n\r\n---\r\n\r\n## **API Reference**\r\n\r\n### **1. `addRouter(path: string, router: Router)`**\r\n\r\n#### Mount sub-router with path prefix\r\n\r\n| Parameter | Type     | Description                              |\r\n|-----------|----------|------------------------------------------|\r\n| `path`    | `string` | Base path for all routes in sub-router   |\r\n| `router`  | `Router` | Configured router instance               |\r\n\r\n**Example:**\r\n\r\n```ts\r\nimport {Router} from \"tejx\";\r\n\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// Mount under /auth prefix\r\n// ‚ùå not support middleware chain. Please use app.use(....)\r\napp.addRouter('/auth', authRouter); \r\n// or\r\n//‚úÖ It support middleware chain\r\napp.use('/auth',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n```ts\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// ‚ùå not use wildcard\r\n// Mount under /auth prefix\r\napp.addRouter('/auth/*', authRouter);\r\n// or\r\n// ‚ùå not use wildcard\r\napp.use('/auth/*',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n```ts\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// ‚ùå not use optional params\r\n// Mount under /auth prefix\r\napp.addRouter('/auth/:version?', authRouter);\r\n// or\r\n// ‚ùå not ues optional params\r\napp.use('/auth/auth/:version?',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n**Note** : If you `app.use` or `app.addRouter` with path pass a new Router path must be static or dynamic params.(not use wildcard and optional params)\r\n\r\nIf you want to use wildcards or optional parameters in the router:\r\n\r\n```ts\r\nconst account = new Router<CustomContext>({\r\n    basePath: '/account/:role?'\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. `group(prefix: string, callback: (router: Router) => void)`**\r\n\r\n**Support dynamic params, optional params, wildcard**\r\n**Create scoped route group**\r\n\r\n| Parameter  | Type       | Description                                     |\r\n|------------|------------|-------------------------------------------------|\r\n| `prefix`   | `string`   | Path segment for group                          |\r\n| `callback` | `function` | Receives group-specific router instance         |\r\n\r\n**Advanced Example:**\r\n\r\n```ts\r\napp.group('/api/v1', (group) => {\r\n  // Group-level middleware\r\n  group.use(apiVersionHeader('v1'), rateLimiter);\r\n  \r\n  // Nested group\r\n  group.group('/users', (userGroup) => {\r\n    userGroup.get('/:id', getUser);\r\n    userGroup.patch('/:id', updateUser);\r\n  });\r\n  \r\n  group.delete('/posts/:id', deletePost);\r\n});\r\n\r\n// Resulting paths:\r\n// /api/v1/users/123\r\n// /api/v1/posts/456\r\n```\r\n\r\n---\r\n\r\n## **Advanced Configuration**\r\n\r\n### **1. Middleware Scoping**\r\n\r\n```ts\r\n// Global middleware (applies to all routes)\r\n// Router-specific middleware\r\nconst paymentRouter = new Router()\r\n  .use(validateCreditCard)\r\n  .post('/charge', processPayment);\r\n\r\n// Route-specific middleware\r\napp.get(\r\n  '/admin/stats',\r\n  [adminAuth, geolock],\r\n  getStatistics\r\n);\r\n```\r\n\r\n### **2. Context Propagation**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\ninterface CustomContext {\r\n  user?: User;\r\n  requestId: string;\r\n}\r\n\r\nconst app = new Router<CustomContext>();\r\napp.use((ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID();\r\n  return next();\r\n});\r\n\r\napp.get('/profile', (ctx) => {\r\n  // ctx is typed as CustomContext\r\n  return ctx.json({ id: ctx.requestId });\r\n});\r\n```\r\n\r\n---\r\n\r\n### **3. Not Found**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\napp.notFound((ctx) => {\r\n    return ctx.text('Custom 404 Message', 404);\r\n});\r\n```\r\n\r\n`notFound` handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n---\r\n\r\n### **3. Error**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\napp.onError((error,ctx) => {\r\n    return ctx.text(error, 500);\r\n});\r\n```\r\n\r\n`onError` handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Route Organization**\r\n\r\n```bash\r\nroutes/\r\n‚îú‚îÄ auth/\r\n‚îÇ  ‚îú‚îÄ login.ts\r\n‚îÇ  ‚îú‚îÄ logout.ts\r\n‚îú‚îÄ api/\r\n‚îÇ  ‚îú‚îÄ v1/\r\n‚îÇ  ‚îÇ  ‚îú‚îÄ users.ts\r\n‚îÇ  ‚îú‚îÄ v2/\r\n‚îÇ     ‚îú‚îÄ users.ts\r\n```\r\n\r\n---\r\n<!-- \r\n## **Configuration Options**\r\n\r\n```ts\r\nnew Router({\r\n  caseSensitive: false, // /Users vs /users\r\n  strictPaths: true,    // /users/ vs /users\r\n  maxNesting: 5,        // Prevent infinite loops\r\n  autoHead: true        // Auto-create HEAD routes\r\n});\r\n``` -->\r\n"
            },
            {
              "originalPath": "3. Route Parameter.md",
              "id": 11,
              "name": "Route Parameter",
              "type": "file",
              "path": "api/router/route-parameter",
              "content": "\r\n---\r\n\r\n## Parameter Types\r\n\r\n### 1. Standard Parameters (`:param`)\r\n\r\nCapture dynamic path segments between slashes\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/:parameterName\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/users/:id\", (ctx) => {\r\n  ctx.params.id // => \"123\" from /users/123\r\n});\r\n\r\nserver.get(\"/posts/:year/:month\", (ctx) => {\r\n  ctx.params.year  // => \"2023\"\r\n  ctx.params.month // => \"09\"\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Mandatory path segments\r\n- Match until next `/` character\r\n- Must appear in order declared\r\n\r\n---\r\n\r\n### 2. Optional Parameters (`:param?`)\r\n\r\nMatch segments that may or may not exist\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/:optionalParam?\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/archive/:year?/:month?\", (ctx) => {\r\n  // Matches:\r\n  // - /archive/2023/08 => year: \"2023\", month: \"08\"\r\n  // - /archive/2023     => year: \"2023\", month: undefined\r\n  // - /archive          => year: undefined, month: undefined\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Can be omitted from request\r\n- Must be sequential at end of path\r\n- Intermediary optional params require subsequent params to also be optional\r\n\r\n---\r\n\r\n### 3. Wildcard Parameters (`*`)\r\n\r\nCapture all remaining path segments\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/*wildcardParam\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/files/*path\", (ctx) => {\r\n  // /files/images/2023/photo.jpg => \r\n  // ctx.params.path = \"images/2023/photo.jpg\"\r\n});\r\n\r\nserver.get(\"/docs/*category\", (ctx) => {\r\n  // /docs/api/v2/endpoints => \r\n  // ctx.params.category = \"api/v2/endpoints\"\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Always returns string (never undefined)\r\n- Must be final segment in route\r\n- Matches all remaining path segments\r\n- Supports nested directory structures\r\n\r\n---\r\n\r\n## Matching Priority\r\n\r\nRoutes are matched with following priority order:\r\n\r\n1. Static paths (`/users/list`)\r\n2. Named parameters (`/users/:id`)\r\n3. Wildcard parameters (`/users/*`)\r\n4. Optional parameters (`/users/:id?`)\r\n\r\n**Example Hierarchy:**\r\n\r\n```ts\r\nserver.get(\"/users/list\", handleList); // Highest priority\r\nserver.get(\"/users/:id\", handleUser); \r\nserver.get(\"/users/*\", catchAll);     // Lowest priority\r\n```\r\n\r\n---\r\n\r\n## Parameter Access\r\n\r\nCaptured parameters are available in `ctx.req.params`:\r\n\r\n```ts\r\ninterface Params {\r\n  [key: string]: string | undefined;\r\n}\r\n\r\n// Example usage:\r\nserver.get(\"/shop/:category/:item?\", (ctx) => {\r\n  const { category, item } = ctx.req.params;\r\n  // category: string \r\n  // item: string | undefined\r\n});\r\n```\r\n\r\n---\r\n\r\n## Conflict Resolution\r\n\r\n### Ambiguous Routes\r\n\r\n```ts\r\n// ‚ùå Conflicting routes \r\n// ‚ùì Will be overwritten by the last handler.\r\n// Output: {name: \"Jhon\"}\r\nserver.get(\"/users/:id\", handleUser);\r\nserver.get(\"/users/:name\", handleByName);  // Will execute be reached\r\n\r\n// ‚úÖ Solution: Use distinct paths\r\nserver.get(\"/users/id/:id\", handleUser);\r\nserver.get(\"/users/name/:name\", handleByName);\r\n```\r\n\r\n### Wildcard Position\r\n\r\n```ts\r\n// ‚ùå Invalid wildcard placement\r\nserver.get(\"/*/profile\", handleProfile); \r\n\r\n// ‚úÖ Valid usage\r\nserver.get(\"/user/*/profile\", handleProfile); // Static segment before wildcard\r\n```\r\n\r\n---\r\n\r\n## Escaping Special Characters\r\n\r\nTo match literal `:` or `*`, escape with backslash:\r\n\r\n```ts\r\nserver.get(\"/colon\\\\:test\", (ctx) => {\r\n  // Matches: /colon:test\r\n});\r\n\r\nserver.get(\"/asterisk\\\\*test\", (ctx) => {\r\n  // Matches: /asterisk*test\r\n});\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Order Routes by Specificity:** Place static routes before dynamic ones\r\n2. **Validate Parameters:** Always sanitize and validate parameter values\r\n3. **Use Optional Sparingly:** Prefer explicit routes for better visibility\r\n4. **Document Complex Routes:** Add comments for routes with multiple parameters\r\n5. **Limit Wildcard Scope:** Use specific patterns before wildcards when possible\r\n\r\n```ts\r\n// Good practice example\r\nserver.get(\"/api/v1/:version/:resource\", (ctx) => {\r\n  const version = parseInt(ctx.params.version || \"\");\r\n  if (isNaN(version)) ctx.status(400).send(\"Invalid version\");\r\n});\r\n```\r\n\r\n---\r\n\r\n## Conflict Resolution Table\r\n\r\n| Path               | Priority | Notes                         |\r\n|--------------------|----------|-------------------------------|\r\n| /users/list         | High      | Specific method + param  (static match)     |\r\n| /users/:id         | High      | Specific method + param       |\r\n| /users             | Medium    | Specific method               |\r\n| /users/*           | Low       | Wildcard has lowest priority  |\r\n\r\n### **Same as post, put, ... http method**\r\n\r\n---\r\n\r\n## `all()` - Universal Method Handler\r\n\r\n**Catches ALL HTTP methods for a specific path**\r\n\r\n### Signature\r\n\r\n```typescript\r\npublic all(path: string, ...args: RouteArgs): this\r\n```\r\n\r\n### Path Parameter Support\r\n\r\n```ts\r\n|Type            | Example              | Captured Values\r\n----------------|----------------------|-------------------\r\nStandard        | /:version/api        | version: \"v2\"\r\nOptional        | /user/:id?/profile   | id: \"123\" or undefined\r\nWildcard        | /docs/*              | *: \"getting-started\"\r\nMixed           | /:lang?/api/*        | lang: \"en\", *: \"v2/endpoints\"\r\n```\r\n\r\n### Examples\r\n\r\n**Basic Usage:**\r\n\r\n```ts\r\n// Handle all methods to /healthcheck\r\nserver.all('/healthcheck', (ctx) => {\r\n  ctx.text(`Method ${ctx.method} received`);\r\n});\r\n\r\n// GET/POST/PUT/DELETE etc to /healthcheck\r\n// ‚Üí \"Method GET received\"\r\n```\r\n\r\n**With Parameters:**\r\n\r\n```ts\r\nserver.all('/*service/status', (ctx) => {\r\n  ctx.json({\r\n    servicePath: ctx.params.service, // \"auth/api\"\r\n    wildcard: ctx.params[\"wildcard\"],       // \"auth/api\"\r\n    method: ctx.method\r\n  });\r\n});\r\n\r\n// PUT /auth/api/v2/status ‚Üí \r\n// { servicePath: \"auth/api/v2\", wildcard: \"auth/api/v2\", method: \"PUT\" }\r\n```\r\n\r\n**With Middleware:**\r\n\r\n```ts\r\nserver.all(\r\n  '/secure/:zone?',\r\n  [authMiddleware, loggingMiddleware],\r\n  (ctx) => {\r\n    ctx.text(`Accessed ${ctx.params.zone || 'default'} zone`);\r\n  }\r\n);\r\n\r\n// POST /secure/admin ‚Üí Runs middlewares, handles zone=\"admin\"\r\n```\r\n\r\n---\r\n\r\n## `addRoute()` - Custom Method Registration\r\n\r\n**Handle non-standard/custom HTTP methods**\r\n\r\n### Signature\r\n\r\n```typescript\r\npublic addRoute(method: HTTPMethod, path: string, ...args: RouteArgs): this\r\n```\r\n\r\n### Supported Methods\r\n\r\n```ts\r\nStandard Methods | Custom Examples\r\n-----------------|-----------------\r\nGET, POST, PUT   | PURGE, LOCK\r\nPATCH, DELETE    | COPY, SEARCH\r\nHEAD, OPTIONS    | CUSTOM_API\r\n```\r\n\r\n### Parameter Examples\r\n\r\n**Custom Method with Parameters:**\r\n\r\n```ts\r\n// Register PURGE method\r\nserver.addRoute('PURGE', '/cache/:region/:group*', (ctx) => {\r\n  purgeCache({\r\n    region: ctx.req.params.region, // \"eu-west\"\r\n    group:  ctx.req.params.group    // \"user-profiles/v2\"\r\n  });\r\n  ctx.status(202);\r\n});\r\n\r\n// PURGE /cache/eu-west/user-profiles/v2 ‚Üí Success\r\n```\r\n\r\n**Optional Parameters:**\r\n\r\n```ts\r\nserver.addRoute('REPORT', '/stats/:type?', (ctx) => {\r\n  generateReport(ctx.params.type || 'daily');\r\n});\r\n\r\n// REPORT /stats/weekly ‚Üí type=\"weekly\"\r\n// REPORT /stats ‚Üí type=\"daily\"\r\n```\r\n\r\n**Wildcard Capture:**\r\n\r\n```ts\r\nserver.addRoute('MSEARCH', '/files/*path', (ctx) => {\r\n  searchFilesystem(ctx.req.params.path); // \"docs/archived/project.txt\"\r\n});\r\n\r\n// MSEARCH /files/docs/archived/project.txt\r\n```\r\n\r\n---\r\n\r\n## Parameter Access Pattern\r\n\r\n```ts\r\ninterface Context {\r\n  params: {\r\n    [key: string]: string | undefined;\r\n    \"*\"?: string; // Wildcard capture\r\n  }\r\n}\r\n\r\n// Access patterns\r\nctx.req.params.paramName    // Standard/optional params\r\nctx.req.params[\"*\"]         // Wildcard value\r\nctx.req.params[0]           // Not used - named params only\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n### For `all()`\r\n\r\n1. Use for:\r\n   - Maintenance mode handlers\r\n   - Global path-specific middleware\r\n   - Method-agnostic endpoints\r\n2. Avoid:\r\n   - Complex business logic\r\n   - Overlapping with specific method handlers\r\n3. Ordering:\r\n\r\n   ```ts\r\n   server.get('/api', specificHandler); // Higher priority\r\n   server.all('/*api', globalMiddleware); // Lower priority\r\n   ```\r\n\r\n### For `addRoute()`\r\n\r\n1. Use for:\r\n   - Custom HTTP methods (RFC 2518 WebDAV, etc)\r\n   - Proprietary API methods\r\n   - Experimental features\r\n2. Compatibility:\r\n\r\n   ```ts\r\n   // Check method support\r\n   if (!ctx.methodSupported('PURGE')) {\r\n     ctx.status(405).header('Allow', 'PURGE, GET');\r\n   }\r\n   ```\r\n\r\n3. Security:\r\n   - Explicitly document non-standard methods\r\n   - Handle CORS/preflight appropriately\r\n\r\n---\r\n\r\n## Conflict Resolution Table\r\n\r\n| Method        | Path               | Priority | Match Example\r\n|---------------|--------------------|----------|---------------\r\n| addRoute('PURGE') | /cache      | High     | PURGE /cache\r\n| all()         | /cache/*          | Medium   | GET/POST etc /cache/123\r\n| get()         | /cache/clear      | Highest  | GET /cache/clear\r\n\r\n**Resolution Rules:**\r\n\r\n1. Exact method matches take priority over `all()`\r\n2. Specific paths beat wildcards\r\n3. Registration order matters for same-priority routes\r\n\r\n---\r\n"
            }
          ]
        },
        {
          "originalPath": "2. Context",
          "name": "Context",
          "path": "api/2-context",
          "type": "folder",
          "children": [
            {
              "originalPath": "1. Basic.md",
              "id": 12,
              "name": "Basic",
              "type": "file",
              "path": "api/context/basic",
              "content": "\r\n## **Public Properties**\r\n\r\n| Property         | Type           | Description                                                                 |\r\n|------------------|----------------|-----------------------------------------------------------------------------|\r\n| `env`            | `object`       | Environment variables and configuration                                     |\r\n| `headers`        | `HeadersParser`| HTTP headers parser instance                                                |\r\n| `pathname`       | `string`       | Request path without query parameters                                       |\r\n| `url`            | `string`       | Full request URL including protocol and query string                        |\r\n| `method`         | `HTTPMethod`   | Uppercase HTTP method (GET/POST/PUT etc)                                    |\r\n| `state`          | `State`        | Application state container for middleware data sharing                     |\r\n\r\n## **Cookie Handling**\r\n\r\n### **`cookies` Getter**\r\n\r\nManages cookies with chainable methods:\r\n\r\n```ts\r\n// Get cookie value\r\nconst session = ctx.cookies.get('sessionID');\r\n\r\n// Set new cookie\r\nctx.cookies.set('prefs', darkMode:true, { \r\n  maxAge: 3600 \r\n});\r\n\r\n// Delete cookie\r\nctx.cookies.delete('oldSession');\r\n```\r\n\r\n**Methods:**\r\n\r\n| Method | Parameters | Description |\r\n|--------|------------|-------------|\r\n| `get`  | `name: string` | Returns cookie value or `undefined` |\r\n| `all`  | - | Returns all cookies as key-value object |\r\n| `set`  | `name: string`, `value: string`, `options?: CookieOptions` | Sets cookie with options |\r\n| `delete` | `name: string`, `options?: CookieOptions` | Invalidates cookie |\r\n\r\n**CookieOptions:**\r\n\r\n```ts\r\ninterface CookieOptions {\r\n  domain?: string;\r\n  path?: string;\r\n  expires?: Date;\r\n  maxAge?: number;\r\n  secure?: boolean;\r\n  httpOnly?: boolean;\r\n  sameSite?: 'Strict' | 'Lax' | 'None';\r\n}\r\n```\r\n\r\n---\r\n\r\n## **Response Methods**\r\n\r\n### **1. `json(body, status?, headers?)`**\r\n\r\nSends JSON response:\r\n\r\n```ts\r\nctx.json({ message: \"Success\" });\r\nctx.json({ error: \"Not Found\" }, 404);\r\nctx.json(data, { 'Cache-Control': 'no-store' });\r\n```\r\n\r\n### **2. `send(body, status?, headers?)`**\r\n\r\nUniversal response handler with auto-detected content type:\r\n\r\n```ts\r\nctx.send(\"<h1>Hello</h1>\"); // text/html\r\nctx.send(Buffer.from(...), 201); // application/octet-stream\r\n```\r\n\r\n### **3. `html(data, status?, headers?)`**\r\n\r\nSends HTML content:\r\n\r\n```ts\r\nctx.html(\"<div>Page</div>\");\r\nctx.html(template, 200, { 'ETag': '123' });\r\n```\r\n\r\n### **4. `text(data, status?, headers?)`**\r\n\r\nSends plain text:\r\n\r\n```ts\r\nctx.text(\"Processing complete\");\r\nctx.text(\"Error\", 500);\r\n```\r\n\r\n### **5. `xml(data, status?, headers?)`**\r\n\r\nSends XML content:\r\n\r\n```ts\r\nctx.xml(\"<note><body>Message</body></note>\");\r\n```\r\n\r\n### **6. `redirect(url, status=302, headers?)`**\r\n\r\nPerforms HTTP redirect:\r\n\r\n```ts\r\nctx.redirect(\"/login\");\r\nctx.redirect(\"https://external.site\", 301);\r\n```\r\n\r\n### **7. `download(filePath, fileName?)`**\r\n\r\nTriggers file download:\r\n\r\n```ts\r\nawait ctx.download(\"/reports/q3.pdf\");\r\nawait ctx.download(\"/tmp/data.csv\", \"2023-data.csv\");\r\n```\r\n\r\n### **8. `status(code)`**\r\n\r\nSets HTTP status code (chainable):\r\n\r\n```ts\r\nctx.status(404).text(\"Not found\");\r\nctx.status(201).json({ id: 42 });\r\n```\r\n\r\n---\r\n\r\n## **Request Access**\r\n\r\n### **`req` Getter**\r\n\r\nProvides normalized request object:\r\n\r\n```ts\r\ninterface Request {\r\n  method: HTTPMethod;\r\n  headers: HeadersParser;\r\n  params: Record<string, any>;\r\n  // ... other request properties\r\n}\r\n\r\n// Usage\r\nconst userId = ctx.req.params.id;\r\nconst authHeader = ctx.req.headers.get(\"Authorization\");\r\n```\r\n\r\n---\r\n\r\n## **Example Workflow**\r\n\r\n```ts\r\n// Middleware example\r\napp.use(async (ctx, next) => {\r\n  // Set request ID\r\n  ctx.requestId = crypto.randomUUID();\r\n  \r\n  // Authentication check\r\n  if (!ctx.req.headers.get('Authorization')) {\r\n    return ctx.status(401).json({ error: \"Unauthorized\" });\r\n  }\r\n\r\n return await next();\r\n});\r\n\r\n// Route handler\r\napp.get('/users/:id', async (ctx) => {\r\n  const user = await db.getUser(ctx.req.params.id);\r\n  \r\n  if (!user) {\r\n    return ctx.status(404).text(\"User not found\");\r\n  }\r\n\r\n  return ctx.json({\r\n    data: user,\r\n    requestId: ctx.requestId\r\n  });\r\n});\r\n```\r\n\r\n### **Headers (`headers`)**\r\n\r\n```ts\r\n// Get authorization header\r\nconst authHeader = ctx.req.headers.get(\"authorization\");\r\n\r\n// Add custom header\r\nctx.headers.set(\"X-Response-Time\", Date.now().toString());\r\n```\r\n\r\n**Common Operations**:\r\n\r\n```ts\r\n// Check content type\r\nif (ctx.req.headers.get(\"content-type\") === \"application/json\") {\r\n  // Parse JSON body\r\n}\r\n\r\n// Set multiple response headers\r\nctx.headers\r\n  .set(\"Cache-Control\", \"max-age=3600\")\r\n  .set(\"X-Powered-By\", \"MyFramework\");\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n1. **State Management**\r\n\r\n   ```ts\r\n   // Middleware sets state\r\n   ctx.state.set('user', authenticatedUser) ;\r\n\r\n   //or\r\n   ctx.user = authenticatedUser; //context propagation\r\n\r\n   // Route handler accesses\r\n   const currentUser = ctx.state.get('user');\r\n   ```\r\n\r\n2. **Header Validation**\r\n\r\n   ```ts\r\n   const contentType = ctx.req.headers.get('Content-Type');\r\n   if (!allowedTypes.includes(contentType)) {\r\n     return ctx.status(415).text(\"Unsupported Media Type\");\r\n   }\r\n   ```\r\n\r\n3. **Parameter Sanitization**\r\n\r\n   ```ts\r\n   const userId = parseInt(ctx.req.params.id);\r\n   if (isNaN(userId)) {\r\n     return ctx.status(400).text(\"Invalid ID format\");\r\n   }\r\n   ```\r\n"
            },
            {
              "originalPath": "2. State.md",
              "id": 13,
              "name": "State",
              "type": "file",
              "path": "api/context/state",
              "content": "# State management\r\n\r\n---\r\n\r\nPublic state container for application data. state storage for middleware and plugins\r\n\r\n## Usage Example\r\n\r\n```typescript\r\nctx.state.set(\"user\", { id: 1, name: \"Alice\" });\r\nconsole.log(ctx.state.get(\"user\")); // Output: { id: 1, name: \"Alice\" }\r\n```\r\n\r\n## Class Definition\r\n\r\n```typescript\r\nexport class State {\r\n    private state: Map<string, any>;\r\n\r\n    constructor() {\r\n        this.state = new Map();\r\n    }\r\n```\r\n\r\n### Methods\r\n\r\n#### `set(key: string, value: any): void`\r\n\r\nStores a value associated with a specific key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key for the value.\r\n- `value` (any): The value to be stored.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.set(\"user\", { id: 1, name: \"Alice\" });\r\n```\r\n\r\n---\r\n\r\n#### `get(key: string): any | undefined`\r\n\r\nRetrieves a stored value by key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key of the value to retrieve.\r\n\r\n**Returns:**\r\n\r\n- The stored value or `undefined` if not found.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconst user = ctx.state.get(\"user\");\r\nconsole.log(user); // { id: 1, name: \"Alice\" }\r\n```\r\n\r\n---\r\n\r\n#### `delete(key: string): boolean`\r\n\r\nDeletes a stored value by key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key to remove.\r\n\r\n**Returns:**\r\n\r\n- `true` if the key was deleted, `false` otherwise.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.delete(\"user\");\r\nconsole.log(ctx.state.get(\"user\")); // undefined\r\n```\r\n\r\n---\r\n\r\n#### `has(key: string): boolean`\r\n\r\nChecks if a key exists in storage.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key to check.\r\n\r\n**Returns:**\r\n\r\n- `true` if the key exists, `false` otherwise.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.has(\"user\")); // true or false\r\n```\r\n\r\n---\r\n\r\n#### `keys(): string[]`\r\n\r\nReturns an array of all stored keys.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.keys()); // [\"user\"]\r\n```\r\n\r\n---\r\n\r\n#### `values(): any[]`\r\n\r\nReturns an array of all stored values.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.values()); // [{ id: 1, name: \"Alice\" }]\r\n```\r\n\r\n---\r\n\r\n#### `entries(): [string, any][]`\r\n\r\nReturns an array of key-value pairs.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.entries()); // [[\"user\", { id: 1, name: \"Alice\" }]]\r\n```\r\n\r\n---\r\n\r\n#### `clear(): void`\r\n\r\nRemoves all stored entries.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.clear();\r\nconsole.log(ctx.state.keys()); // []\r\n```\r\n"
            },
            {
              "originalPath": "3. Context Propagation.md",
              "id": 14,
              "name": "Context Propagation",
              "type": "file",
              "path": "api/context/context-propagation",
              "content": "\r\n---\r\n\r\n# Context Propagation\r\n\r\n## Overview\r\n\r\nContext propagation enables type-safe sharing of request-scoped data across middleware and handlers. It ensures strict type validation while allowing hierarchical context extension.\r\n\r\n---\r\n\r\n## Core Concepts\r\n\r\n### 1. Type-Safe Context Definition\r\n\r\nDefine your context shape using TypeScript interfaces:\r\n\r\n```typescript\r\ninterface CustomContext {\r\n  // Optional authentication data\r\n  user?: User\r\n  \r\n  // Required request identifier\r\n  requestId: string\r\n  \r\n  // Add other request-specific properties\r\n  // logger?: Logger\r\n  // db?: DatabaseConnection\r\n}\r\n```\r\n\r\n### 2. Router Initialization\r\n\r\nCreate a router with your context type:\r\n\r\n```typescript\r\nimport {Router} from \"tejx\";\r\nconst app = new Router<CustomContext>()\r\n```\r\n\r\n### 3. Middleware Implementation\r\n\r\nAdd context-enriching middleware with full type safety:\r\n\r\n```typescript\r\n// Authentication middleware\r\napp.use(async (ctx, next) => {\r\n  ctx.user = await authenticateRequest(ctx.request)\r\n  return next()\r\n})\r\n\r\n// Request ID middleware\r\napp.use((ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID()\r\n  return next()\r\n})\r\n```\r\n\r\n### 4. Handler Access\r\n\r\nAccess validated context properties in endpoints:\r\n\r\n```typescript\r\napp.get('/profile', (ctx) => {\r\n  // TypeScript automatically infers context shape\r\n  return Response.json({\r\n    id: ctx.requestId,\r\n    user: ctx.user.email // Safe access to user data\r\n  })\r\n})\r\n```\r\n\r\n---\r\n\r\n## Advanced Features\r\n\r\n### Context Composition\r\n\r\nMerge multiple context types for modular development:\r\n\r\n```typescript\r\ninterface AuthContext {\r\n  user: User\r\n  session: Session\r\n}\r\n\r\ninterface LoggingContext {\r\n  logger: Logger\r\n  requestStart: number\r\n}\r\n\r\ntype AppContext = AuthContext & LoggingContext\r\n\r\nconst app = new Router<AppContext>()\r\n```\r\n\r\n### Validation Middleware\r\n\r\nEnsure context integrity with validation:\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  if (!ctx.requestId) {\r\n    throw new Error('Missing request ID')\r\n  }\r\n  return next()\r\n})\r\n```\r\n\r\n---\r\n\r\n## Error Handling\r\n\r\n### Type Safety Guards\r\n\r\nThe compiler prevents common mistakes:\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  // Type Error: Property 'newProp' does not exist\r\n  ctx.newProp = 'value' \r\n  // Type Error: requestId must be string\r\n  ctx.requestId = 123\r\n  return next();\r\n})\r\n```\r\n\r\n### Optional Properties\r\n\r\nSafely handle partial context:\r\n\r\n```typescript\r\napp.get('/public', (ctx) => {\r\n  // user is optional - check existence\r\n  return ctx.user \r\n    ? Response.json(ctx.user)\r\n    : Response.json({ error: 'Unauthorized' }, 401)\r\n})\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Initialization Order**\r\n   - Set critical context properties early in the middleware chain\r\n   - Place validation middleware after property initialization\r\n\r\n2. **Immutability**\r\n\r\n   ```typescript\r\n   // Avoid:\r\n   ctx.user = {...ctx.user, ...newData}\r\n   \r\n   // Prefer:\r\n   const updatedUser = {...ctx.user, ...newData}\r\n   ```\r\n\r\n3. **Testing Patterns**\r\n\r\n   ```typescript\r\n   // Mock context for testing\r\n   const testCtx: CustomContext = {\r\n     requestId: 'test-123',\r\n     user: mockUser\r\n   }\r\n   ```\r\n\r\n---\r\n\r\n### Context Lifecycle\r\n\r\n1. Initialization\r\n2. Middleware Processing\r\n3. Handler Execution\r\n4. Cleanup Hooks\r\n\r\n---\r\n"
            },
            {
              "originalPath": "4. Cookies.md",
              "id": 15,
              "name": "Cookies",
              "type": "file",
              "path": "api/context/cookies",
              "content": "\r\n# Cookies\r\n\r\n---\r\n\r\n## **Setting and Retrieving Cookies in `PUT /data` Route**\r\n\r\n```ts\r\napp.put('/data', async (ctx) => {\r\n    // Set a cookie\r\n    ctx.cookies.set('sessionToken', 'abc123', { HttpOnly: true, Secure: true });\r\n\r\n    // Get a cookie\r\n    const session = ctx.cookies.get('sessionToken');\r\n\r\n    // Delete a cookie\r\n    // ctx.cookies.delete('sessionToken');\r\n\r\n    return ctx.json({ \r\n        success: true, \r\n        message: \"PUT request received\", \r\n        sessionToken: session \r\n    });\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Functions and Their Purpose**\r\n\r\n| **Function**  | **Description** |\r\n|--------------|----------------|\r\n| `get(name)` | Retrieves the value of a specific cookie. |\r\n| `all()` | Returns an object containing all cookies. |\r\n| `set(name, value, options?)` | Sets a new cookie with optional attributes. |\r\n| `delete(name, options?)` | Deletes a cookie by setting its expiration in the past. |\r\n\r\n---\r\n\r\n## **Example Usage in a Client Request**\r\n\r\n### **Sending a Cookie with Fetch API**\r\n\r\n```js\r\nfetch('/data', {\r\n    method: 'PUT',\r\n    credentials: 'include', // its mandatory\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ action: \"test\" })\r\n}).then(res => res.json())\r\n  .then(data => console.log(data));\r\n```\r\n\r\n## **Security Considerations**\r\n\r\nWhen handling cookies, consider the following:\r\n\r\n1. **Use `HttpOnly` for Security:** Prevents JavaScript access to cookies, reducing XSS risks.\r\n2. **Use `Secure` for HTTPS:** Ensures cookies are only transmitted over HTTPS.\r\n3. **Use `SameSite` to Prevent CSRF:**\r\n   - `SameSite=Strict`: Blocks all cross-site requests.\r\n   - `SameSite=Lax`: Allows safe cross-site navigation.\r\n   - `SameSite=None; Secure`: Required for cross-origin cookies (e.g., third-party cookies).\r\n4. **Set Expiry for Session Management:** Use `expires` to define cookie lifespan.\r\n5. **Enable Path Restriction:** Restrict cookies to specific paths using `Path=/some-path`.\r\n\r\n---\r\n\r\n### **Notes**\r\n\r\n- Cookies can have attributes like `HttpOnly`, `Secure`, `SameSite`, and `Expires`.\r\n- Ensure that **cookies are sent with credentials (`credentials: 'include'`)** if needed.\r\n"
            }
          ]
        },
        {
          "originalPath": "3. Request",
          "name": "Request",
          "path": "api/3-request",
          "type": "folder",
          "children": [
            {
              "originalPath": "1. Request.md",
              "id": 16,
              "name": "Request",
              "type": "file",
              "path": "api/request/request",
              "content": "\r\n---\r\n\r\n## **Request Handling API**\r\n\r\n## **1. Method**\r\n\r\n**Retrieves the HTTP request method.**\r\n\r\n```ts\r\n// Example: GET, POST, PUT, DELETE, etc.\r\nconst method = ctx.req.method; \r\n```\r\n\r\n**Properties**:\r\n\r\n- Read-only property\r\n- Always returns uppercase method name\r\n\r\n**Example**:\r\n\r\n```ts\r\nserver.post(\"/users\", (ctx) => {\r\n  if (ctx.req.method === \"POST\") {\r\n    // Handle user creation\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **2. URL Reference (`urlRef`)**\r\n\r\n**Deconstructed URL components.**\r\n\r\n```ts\r\ninterface UrlRef {\r\n  hash?: string;         // #section\r\n  protocol?: string;     // \"http:\" or \"https:\"\r\n  origin?: string;       // \"https://example.com:8080\"\r\n  username?: string;     // Auth username\r\n  password?: string;     // Auth password\r\n  hostname?: string;     // \"example.com\"\r\n  port?: string;         // \"8080\"\r\n  href?: string;         // Full URL string\r\n  query: Record<string, string>; // Parsed query parameters\r\n  pathname: string;      // \"/api/v2/users\"\r\n}\r\n```\r\n\r\n**Usage**:\r\n\r\n```ts\r\nconst url = ctx.req.urlRef;\r\n\r\n// Example for \"https://api.com:8080/users?id=123#details\"\r\nconsole.log(url.port);     // \"8080\"\r\nconsole.log(url.hostname); // \"api.com\"\r\nconsole.log(url.query);    // { id: \"123\" }\r\nconsole.log(url.hash);     // \"details\"\r\n```\r\n\r\n**Note**: Missing components return `undefined`.\r\n\r\n---\r\n\r\n## **3. Query Parameters (`query`)**\r\n\r\n**Parsed URL query string parameters.**\r\n\r\n```ts\r\n// URL: /search?q=term&page=2&filter=new\r\nconst query = ctx.req.query; \r\n/* Returns:\r\n{\r\n  q: \"term\",\r\n  page: \"2\",\r\n  filter: \"new\"\r\n} */\r\n```\r\n\r\n**Behavior**:\r\n\r\n- Decodes URL-encoded values\r\n- Last value wins for duplicate keys\r\n- Returns empty object if no query\r\n\r\n**Example**:\r\n\r\n```ts\r\nserver.get(\"/products\", (ctx) => {\r\n  const page = ctx.req.query.page || \"1\";\r\n  // Pagination logic\r\n});\r\n```\r\n\r\n---\r\n\r\n## **4. Dynamic Parameters (`params`)**\r\n\r\n**Captured route parameters from path patterns.**\r\n\r\n**Route Patterns**:\r\n\r\n```ts\r\n// Route definition\r\nserver.get(\"/users/:id/posts/:slug*\", handler);\r\n\r\n// Request: /users/42/posts/announcements/2023\r\nctx.req.params = {\r\n  id: \"42\",\r\n  slug: \"announcements/2023\" // Wildcard capture\r\n};\r\n```\r\n\r\n**Supported Patterns**:\r\n\r\n| Pattern       | Example Route        | Request Path       | Result            |\r\n|---------------|----------------------|--------------------|-------------------|\r\n| `:param`      | /users/:id           | /users/42          | `{ id: \"42\" }`    |\r\n| `:param?`     | /archive/:year?      | /archive           | `{ year: null }`  |\r\n| `*`           | /files/*path         | /files/docs/readme | `{ path: \"docs/readme\" }` |\r\n\r\n**Best Practices**:\r\n\r\n```ts\r\n// Validate numeric ID\r\nserver.get(\"/products/:id\", (ctx) => {\r\n  const id = parseInt(ctx.req.params.id);\r\n  if (isNaN(id)) return ctx.status(400);\r\n});\r\n```\r\n\r\n---\r\n\r\n## **5. Headers (`headers`)**\r\n\r\n```ts\r\n// Get authorization header\r\nconst authHeader = ctx.req.headers.get(\"authorization\");\r\n\r\n// Add custom header\r\nctx.headers.set(\"X-Response-Time\", Date.now().toString());\r\n```\r\n\r\n**Common Operations**:\r\n\r\n```ts\r\n// Check content type\r\nif (ctx.req.headers.get(\"content-type\") === \"application/json\") {\r\n  // Parse JSON body\r\n}\r\n\r\n// Set multiple response headers\r\nctx.headers\r\n  .set(\"Cache-Control\", \"max-age=3600\")\r\n  .set(\"X-Powered-By\", \"MyFramework\");\r\n```\r\n\r\n---\r\n\r\n## **Request Flow Diagram**\r\n\r\n```bash\r\nsequenceDiagram\r\n  Client->>Server: GET /users/42?details=true\r\n  Server->>Handler: \r\n  Handler->>Parse URL: Extract { id: \"42\" }\r\n  Handler->>Check Headers: Verify Content-Type\r\n  Handler->>Process Query: { details: \"true\" }\r\n  Handler->>Response: Send data\r\n  Server->>Client: 200 OK with headers\r\n```\r\n\r\n---\r\n\r\n## **6. Body Parser**\r\n\r\nHandle request bodies with built-in parsers for various content types.\r\n\r\n### **Supported Formats**\r\n\r\n| Method | Content-Type | Features |\r\n|--------|--------------|----------|\r\n| `text()` | `text/plain` | Raw text parsing |\r\n| `json()` | `application/json` | JSON validation |\r\n| `formData()` | `multipart/form-data`<br>`application/x-www-form-urlencoded` | File uploads + form fields |\r\n\r\n---\r\n\r\n### **1. Text Parsing**\r\n\r\n**Use Case:** Plaintext, XML, CSV, or custom formats  \r\n**Max Size:** Configurable via `maxBodySize`\r\n\r\n```ts\r\n// Basic text parsing\r\nconst rawText = await ctx.req.text();\r\n\r\n// With error handling\r\ntry {\r\n  const config = await ctx.req.text();\r\n  // Process text content\r\n} catch (error) {\r\n  ctx.status(400).text(\"Invalid text payload\");\r\n}\r\n```\r\n\r\n---\r\n\r\n### **2. JSON Parsing**\r\n\r\n**Automatic Validation:**  \r\n\r\n```ts\r\ntry {\r\n  const data = await ctx.req.json();\r\n} \r\ncatch (error) {\r\n  ctx.status(422).json({ error: \"Validation failed\" });\r\n}\r\n```\r\n\r\n---\r\n\r\n### **3. Form Data Handling**\r\n\r\n#### **URL-Encoded Forms**\r\n\r\n```ts\r\nconst form = await ctx.req.formData();\r\nconsole.log(form.username); // \"john_doe\"\r\n```\r\n\r\n#### **Multipart File Uploads**\r\n\r\n```ts\r\n// File upload configuration\r\nconst config = {\r\n  maxFileSize: 50 * 1024 * 1024, // 50MB\r\n  allowedTypes: [\"image/jpeg\", \"application/pdf\"]\r\n};\r\n\r\nconst form = await ctx.req.formData(config);\r\nconst file = form.avatar as File;\r\n\r\n// Save to filesystem\r\nconst buffer = await file.arrayBuffer();\r\nwriteFileSync(`./uploads/${file.name}`, Buffer.from(buffer));\r\n```\r\n\r\n---\r\n\r\n### **4. File Upload Example**\r\n\r\n**Route Handler:**\r\n\r\n```ts\r\nserver.post(\"/upload\", async (ctx) => {\r\n  try {\r\n    const form = await ctx.req.formData();\r\n\r\n    const files = form.attachments;\r\n    let results = [];\r\n    if(Array.isArray(files)){\r\n      for (const file of files) {\r\n        const sanitizedName = sanitizeFilename(file.name);\r\n        const path = `./uploads/${sanitizedName}`;\r\n        \r\n        await writeFile(path, await file.arrayBuffer());\r\n        results.push({ name: sanitizedName, status: \"success\" });\r\n      }\r\n    }\r\n\r\n    return ctx.json({ results });\r\n  } catch (error) {\r\n    return ctx.status(500).json({ error: \"Upload failed\" });\r\n  }\r\n});\r\n```\r\n\r\n**Client-Side Upload:**\r\n\r\n```js\r\nconst form = new FormData();\r\nform.append(\"avatar\", fileInput.files[0]);\r\n\r\nfetch(\"/upload\", {\r\n  method: \"POST\",\r\n  body: form\r\n});\r\n```\r\n\r\n---\r\n"
            },
            {
              "originalPath": "2. Body Parser.md",
              "id": 17,
              "name": "Body Parser",
              "type": "file",
              "path": "api/request/body-parser",
              "content": "# Body Parser\r\n\r\n---\r\n\r\n- **Text parsing**  \r\n- **JSON parsing**  \r\n- **URL-encoded form parsing**  \r\n- **Multipart form-data parsing** (including file handling)  \r\n\r\n---\r\n\r\n## **Body Parser**\r\n\r\n### **1. Parsing Text Requests**\r\n\r\nThe `text()` method reads and returns the request body as a string.\r\n\r\n```ts\r\n    const body = await ctx.req.text();\r\n```\r\n\r\n---\r\n\r\n### **2. Parsing JSON Requests**\r\n\r\nThe `json()` method ensures that the content type is `application/json` before parsing the request body.\r\n\r\n```ts\r\n    const body = await ctx.req.json();\r\n```\r\n\r\n---\r\n\r\n### **3. Parsing Form Data (URL-Encoded & Multipart)**\r\n\r\nThe `formData()` method dynamically detects and parses form submissions, handling:\r\n\r\n- **JSON (`application/json`)**\r\n- **URL-encoded (`application/x-www-form-urlencoded`)**\r\n- **Multipart form-data (`multipart/form-data`)**, including file uploads.\r\n\r\n```ts\r\n    const body = await ctx.req.formData();\r\n\r\n```\r\n\r\n---\r\n\r\n## **Example: File Upload Route**\r\n\r\nThis route:\r\n\r\n- Accepts file uploads via `multipart/form-data`\r\n- Saves the file to the **uploads** directory\r\n- Responds with the file path\r\n\r\n```ts\r\nimport { join } from 'path';\r\nimport { writeFile } from 'fs/promises';\r\n\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file uploaded\" }, 400);\r\n    }\r\n\r\n    try {\r\n        const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n        const filePath = join(process.cwd(), 'uploads', file.name); // Define file path\r\n\r\n        await writeFile(filePath, Buffer.from(buffer)); // Save file\r\n\r\n        return ctx.json({ \r\n            message: \"File uploaded successfully\", \r\n            path: filePath \r\n        });\r\n    } catch (error: any) {\r\n        return ctx.json({ \r\n            error: \"File save failed\", \r\n            details: error.message \r\n        }, 500);\r\n    }\r\n});\r\n```\r\n\r\n## **Send buffer**\r\n\r\n```ts\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file find\" }, 400);\r\n    }\r\n    const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n    return ctx.send(buffer, {\r\n        'Content-Type': file.type // its required\r\n    })\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Usage Example: Uploading a File via `fetch`**\r\n\r\nHere‚Äôs how a client can send a file to this endpoint using JavaScript:\r\n\r\n```js\r\nconst fileInput = document.querySelector('input[type=\"file\"]');\r\nconst formData = new FormData();\r\nformData.append(\"file\", fileInput.files[0]);\r\n\r\nfetch('/data', {\r\n    method: 'POST',\r\n    body: formData\r\n})\r\n.then(response => response.json())\r\n.then(data => console.log(data))\r\n.catch(error => console.error('Error:', error));\r\n```\r\n\r\n---\r\n\r\n## **Summary of Features**\r\n\r\n| Feature | Description |\r\n|---------|------------|\r\n| `text()` | Reads request body as a string. |\r\n| `json()` | Parses `application/json` data. |\r\n| `formData()` | Parses `application/x-www-form-urlencoded` and `multipart/form-data`. |\r\n\r\n---\r\n\r\n```ts\r\n// Generic Form Handling\r\nconst form = await ctx.req.formData();\r\n\r\n// Accessing Values\r\nconst username = form.username;\r\nconst avatar = form.avatar as File;\r\n```\r\n\r\n---\r\n\r\n## **File Upload Deep Dive**\r\n\r\n### **Configuration Options**\r\n\r\n```ts\r\ninterface UploadConfig {\r\n  maxFileSize?: number;      // Default: 10MB\r\n  allowedTypes?: string[];   // ['image/*', 'application/pdf']\r\n  maxFiles?: number;         // Default: undefine\r\n}\r\n```\r\n\r\n### **cURL Upload**\r\n\r\n```bash\r\ncurl -X POST \\\r\n  -F \"document=@report.pdf\" \\\r\n  -F \"metadata={\\\"category\\\":\\\"finance\\\"};type=application/json\" \\\r\n  http://api.example.com/upload\r\n```\r\n\r\n### **2. Browser Fetch with Progress**\r\n\r\n```js\r\nconst uploadFile = async (file) => {\r\n  const form = new FormData();\r\n  form.append('file', file);\r\n  \r\n  const response = await fetch('/upload', {\r\n    method: 'POST',\r\n    body: form,\r\n    headers: {\r\n      'X-Upload-Token': 'auth_token_here'\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Upload failed: ${await response.text()}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Performance Tips**\r\n\r\n1. **Stream Processing:** For large files, use streaming instead of full buffering\r\n\r\n   ```ts\r\n   const stream = file.stream();\r\n   const transformer = new TransformStream();\r\n   // Add processing logic\r\n   ```\r\n\r\n2. **Memory Management:** Configure body parser limits based on expected payloads\r\n\r\n3. **Async Processing:** Handle file operations in background workers for large uploads\r\n\r\n4. **CORS Configuration:** Proper headers for cross-origin uploads\r\n\r\n   ```ts\r\n   ctx.headers.set('Access-Control-Allow-Origin', 'trusted-domain.com');\r\n   ```\r\n\r\n### **üõ†Ô∏è Example Usage**\r\n\r\n```javascript\r\nconst allowedTypes = [\"image/png\", \"image/jpeg\", \"image/webp\", \"video/mp4\"];\r\n\r\nconst formData = await ctx.req.formData({\r\n    sanitized: true,  // Ensure filename is sanitized\r\n    allowedTypes,  // Define accepted file types as an array\r\n    maxSize: 5000,  // Max file size in KB (5MB)\r\n});\r\n```\r\n\r\n---\r\n\r\n## **üîπ API Reference: `ctx.req.formData(options)`**\r\n\r\n### **üìù Parameters**\r\n\r\n| Option           | Type       | Default  | Description |\r\n|-----------------|-----------|----------|-------------|\r\n| `sanitized` | `boolean` | `false` | If `true`, filenames will be **sanitized** (remove special characters). |\r\n| `allowedTypes`  | `string[]` | `[]` | An **array of MIME types** (e.g., `[\"image/png\", \"image/jpeg\"]`). |\r\n| `maxSize`       | `number`   | `Infinity` | Max file size allowed (in KB). |\r\n\r\n---\r\n\r\n### **üîπ Return Value**\r\n\r\nThe function returns a **parsed form data object**:\r\n\r\n```javascript\r\n{\r\n    fields: { key1: \"value1\" }, // Form fields (non-file)\r\n    files: [\r\n        {\r\n            name: \"example.jpg\", \r\n            sanitizedName: \"example.jpg\",\r\n            type: \"image/jpeg\",\r\n            size: 1024, // File size in KB\r\n            path: \"/tmp/uploads/example.jpg\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n---\r\n\r\n## **üöÄ Examples**\r\n\r\n### **‚úÖ Allow Only PNG & JPEG Images**\r\n\r\n```javascript\r\nconst formData = await ctx.req.formData({\r\n    allowedTypes: [\"image/png\", \"image/jpeg\"]\r\n});\r\n```\r\n\r\n### **‚úÖ Allow Images & Videos**\r\n\r\n```javascript\r\nconst formData = await ctx.req.formData({\r\n    allowedTypes: [\"image/png\", \"image/jpeg\", \"image/webp\", \"video/mp4\"],\r\n    maxSize: 8000 // Max 8MB\r\n});\r\n```\r\n\r\n---\r\n\r\n## **‚ö†Ô∏è Error Handling**\r\n\r\n### **‚ùå If File Type is Not Allowed**\r\n\r\nIf a file type isn't in `allowedTypes`, it is **ignored** without throwing an error.\r\n\r\n### **‚ùå If File Exceeds `maxSize`**\r\n\r\n- The system **prevents** the upload of large files.\r\n\r\n### **‚ùå If No Files are Uploaded**\r\n\r\n- Returns an empty `files` array.\r\n\r\n---\r\n\r\n## **üõ†Ô∏è Best Practices**\r\n\r\n‚úÖ Use an **array for easier customization** (`allowedTypes`).  \r\n‚úÖ Always **sanitize filenames** if saving on a server.  \r\n‚úÖ Set a **reasonable file size limit** (`maxSize`).  \r\n‚úÖ Implement **logging** for skipped files.  \r\n\r\n---\r\n"
            }
          ]
        },
        {
          "originalPath": "4. Response",
          "name": "Response",
          "path": "api/4-response",
          "type": "folder",
          "children": [
            {
              "originalPath": "1. TejResponse.md",
              "id": 18,
              "name": "TejResponse",
              "type": "file",
              "path": "api/response/tejresponse",
              "content": "# **TejResponse**\r\n\r\n## Overview\r\n\r\nThe `TejResponse` class provides a set of static methods to simplify HTTP response handling in a web application. It supports various response types including JSON, HTML, text, XML, file downloads, and redirections.\r\n\r\n---\r\n\r\n## Import\r\n\r\n```ts\r\nimport {TejResponse} from \"jetx\";\r\n```\r\n\r\n## Or Custom Response\r\n\r\n```ts\r\napp.get('/data', async (ctx) => {\r\n    return new Response('Hello World', { status: 200 });\r\n});`\r\n```\r\n\r\n## Methods\r\n\r\n### `json`\r\n\r\n#### Description\r\n\r\nSends a JSON response.\r\n\r\n#### Parameters\r\n\r\n- `body: any` - The response data.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with JSON data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.json({ message: \"Success\" }, 200);\r\n// or using context\r\nreturn ctx.json({ message: \"Success\" }, 200);\r\n```\r\n\r\n---\r\n\r\n### `html`\r\n\r\n#### Description\r\n\r\nSends an HTML response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The HTML content as a string.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with HTML data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.html(\"<h1>Welcome</h1>\", 200);\r\n// or using context\r\nreturn ctx.html(\"<h1>Welcome</h1>\", 200);\r\n```\r\n\r\n---\r\n\r\n### `text`\r\n\r\n#### Description\r\n\r\nSends a plain text response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The text content.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with plain text data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.text(\"Hello, World!\", 200);\r\n// or using context\r\nreturn ctx.text(\"Hello, World!\", 200);\r\n```\r\n\r\n---\r\n\r\n### `xml`\r\n\r\n#### Description\r\n\r\nSends an XML response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The XML content.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with XML data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.xml(\"<note><to>User</to><message>Hello</message></note>\", 200);\r\n// or using context\r\nreturn ctx.xml(\"<note><to>User</to><message>Hello</message></note>\", 200);\r\n```\r\n\r\n---\r\n\r\n### `send`\r\n\r\n#### Description\r\n\r\nSends a response with any content type, automatically determining the content type if not provided.\r\n\r\n#### Parameters\r\n\r\n- `body: any` - The response body.\r\n- `status?: number` (Optional) - HTTP status code.\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with the provided data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.send(\"Custom Content\", 200, { \"X-Custom-Header\": \"value\" });\r\n// or using context\r\nreturn ctx.send(\"Custom Content\", 200, { \"X-Custom-Header\": \"value\" });\r\n```\r\n\r\n---\r\n\r\n### `redirect`\r\n\r\n#### Description\r\n\r\nRedirects to a given URL.\r\n\r\n#### Parameters\r\n\r\n- `url: string` - The target URL.\r\n- `status?: number` (Optional) - HTTP status code (default: 302).\r\n- `headers?: ResponseHeaders` (Optional) - Additional headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with redirect headers.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.redirect(\"https://example.com\");\r\n// or using context\r\nreturn ctx.redirect(\"https://example.com\");\r\n```\r\n\r\n---\r\n\r\n### `download`\r\n\r\n#### Description\r\n\r\nHandles file downloads.\r\n\r\n#### Parameters\r\n\r\n- `filePath: string` - The path to the file.\r\n- `fileName: string` - The name of the downloaded file.\r\n\r\n#### Returns\r\n\r\nA `Promise<Response>` object for file download.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn await TejResponse.download(\"/path/to/file.pdf\", \"document.pdf\");\r\n// or using context\r\nreturn ctx.download(\"/path/to/file.pdf\", \"document.pdf\");\r\n```\r\n\r\n---\r\n\r\n### `sendFile`\r\n\r\n#### Description\r\n\r\nServes a static file to the client.\r\n\r\n#### Parameters\r\n\r\n- `filePath: string` - Absolute or relative path to the file.\r\n- `fileName?: string` (Optional) - The name of the sent file.\r\n\r\n#### Returns\r\n\r\nA `Promise<Response>` object with the file stream.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn await TejResponse.sendFile(\"/path/to/image.jpg\", \"picture.jpg\");\r\n// or using context\r\nreturn ctx.sendFile(\"/path/to/image.jpg\", \"picture.jpg\");\r\n```\r\n\r\n---\r\n\r\n## Notes\r\n\r\n- The `TejResponse` class is designed to work in different runtime environments such as Node.js, Bun, and Deno.\r\n- Methods automatically handle appropriate content-type headers.\r\n- `download` and `sendFile` methods check for file existence and serve accordingly.\r\n\r\n---\r\n\r\n## Example Usage in an Express-like Framework\r\n\r\n```ts\r\napp.get(\"/json\", (req, res) => {\r\n    return TejResponse.json({ message: \"Hello World\" });\r\n    // or using context\r\n    return ctx.json({ message: \"Hello World\" });\r\n});\r\n\r\napp.get(\"/redirect\", (req, res) => {\r\n    return TejResponse.redirect(\"https://example.com\");\r\n    // or using context\r\n    return ctx.redirect(\"https://example.com\");\r\n});f\r\n```\r\n"
            }
          ]
        }
      ]
    },
    {
      "originalPath": "5. Headers API.md",
      "id": 19,
      "name": "Headers API",
      "type": "file",
      "path": "headers-api",
      "content": "\r\n---\r\n\r\n# Headers API\r\n\r\n**Request and response headers are different.**\r\n\r\n---\r\n\r\n## **Core Methods**\r\n\r\n### **1. `add(headers: [string, string][] | Record<string, string>)`**  \r\n\r\n**Purpose:** Add multiple headers without overwriting existing ones  \r\n**Behavior:**  \r\n\r\n- Appends new headers while preserving existing ones  \r\n- Merges values for duplicate headers  \r\n\r\n```ts\r\n// Array of tuples example\r\nheaders.add([\r\n  [\"Content-Type\", \"application/json\"],\r\n  [\"Cache-Control\", \"max-age=3600\"]\r\n]);\r\n\r\n// Object example\r\nheaders.add({\r\n  \"X-Custom-Header\": \"Value1\",\r\n  \"Accept-Encoding\": \"gzip\"\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. `set(key: string, value: string | string[])`**  \r\n\r\n**Purpose:** Create or overwrite a header  \r\n**Behavior:**  \r\n\r\n- Replaces all existing values for this header  \r\n- Accepts single value or array of values  \r\n\r\n```ts\r\n// Single value\r\nheaders.set(\"Authorization\", \"Bearer abc123\");\r\n\r\n// Multiple values\r\nheaders.set(\"Accept-Language\", [\"en-US\", \"fr-FR\"]);\r\n```\r\n\r\n---\r\n\r\n### **3. `get(key: string): string | undefined`**  \r\n\r\n**Purpose:** Retrieve first value of a header  \r\n\r\n```ts\r\nconst contentType = ctx.req.headers.get(\"content-type\"); \r\n// \"application/json\" (case-insensitive)\r\n```\r\n\r\n---\r\n\r\n### **4. `getAll(key: string): string[]`**  \r\n\r\n**Purpose:** Retrieve all values of a header  \r\n\r\n```ts\r\nconst languages = ctx.req.headers.getAll(\"accept-language\");\r\n// [\"en-US\", \"fr-FR\"]\r\n```\r\n\r\n---\r\n\r\n### **5. `has(key: string): boolean`**  \r\n\r\n**Purpose:** Check header existence  \r\n\r\n```ts\r\nif (ctx.req.headers.has(\"x-auth-token\")) {\r\n  // Handle authentication\r\n}\r\n```\r\n\r\n---\r\n\r\n### **6. `delete(key: string): boolean`**  \r\n\r\n**Purpose:** Remove a header  \r\n**Returns:** `true` if header existed, `false` otherwise  \r\n\r\n```ts\r\nconst existed = ctx.req.headers.delete(\"expires\");\r\n```\r\n\r\n---\r\n\r\n### **7. `append(key: string, value: string)`**  \r\n\r\n**Purpose:** Add value to existing header or create new  \r\n\r\n```ts\r\nheaders.append(\"Vary\", \"User-Agent\");\r\nheaders.append(\"Vary\", \"Accept-Encoding\");\r\n// Vary: User-Agent, Accept-Encoding\r\n```\r\n\r\n---\r\n\r\n## **Iteration Methods**\r\n\r\n### **8. `entries(): Iterable<[string, string[]]>`**  \r\n\r\n**Purpose:** Get [key, values] iterator  \r\n\r\n```ts\r\nfor (const [header, values] of headers.entries()) {\r\n  console.log(`${header}: ${values.join(', ')}`);\r\n}\r\n```\r\n\r\n### **9. `keys(): Iterable<string>`**  \r\n\r\n**Purpose:** Get header names iterator  \r\n\r\n```ts\r\nfor (const headerName of headers.keys()) {\r\n  console.log(\"Header present:\", headerName);\r\n}\r\n```\r\n\r\n### **10. `values(): Iterable<string[]>`**  \r\n\r\n**Purpose:** Get header values iterator  \r\n\r\n```ts\r\nfor (const values of headers.values()) {\r\n  console.log(\"Values:\", values);\r\n}\r\n```\r\n\r\n---\r\n\r\n## **Utility Methods**\r\n\r\n### **11. `forEach(callback: (values: string[], key: string) => void)`**  \r\n\r\n**Purpose:** Iterate through headers  \r\n\r\n```ts\r\nheaders.forEach((values, key) => {\r\n  console.log(`Header ${key} has ${values.length} values`);\r\n});\r\n```\r\n\r\n### **12. `toObject(): Record<string, string | string[]>`**  \r\n\r\n**Purpose:** Convert to plain JS object  \r\n\r\n```ts\r\nconst headerObj = headers.toObject();\r\n/* Returns:\r\n{\r\n  \"content-type\": \"application/json\",\r\n  \"accept-language\": [\"en-US\", \"fr-FR\"]\r\n}\r\n*/\r\n```\r\n\r\n---\r\n\r\n## **Usage Patterns**\r\n\r\n### **Request Header Modification**\r\n\r\n```ts\r\n// Middleware to add security headers\r\nserver.use(async (ctx) => {\r\n  ctx.headers\r\n    .set(\"X-Content-Type-Options\", \"nosniff\")\r\n    .set(\"Content-Security-Policy\", \"default-src 'self'\")\r\n    .delete(\"X-Powered-By\");\r\n  \r\n  await ctx.next();\r\n});\r\n```\r\n\r\n### **Response Header Handling**\r\n\r\n```ts\r\n// API versioning example\r\nserver.get(\"/data\", (ctx) => {\r\n  ctx.headers\r\n    .set(\"X-API-Version\", \"2.1\")\r\n    .append(\"Vary\", \"Accept-Encoding\");\r\n  \r\n  return ctx.json({ data: \"...\" });\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Header Operations Cheat Sheet**\r\n\r\n| Method | Description | Mutable | Returns |\r\n|--------|-------------|---------|---------|\r\n| `add()` | Add multiple headers | ‚úÖ | `void` |\r\n| `set()` | Replace header values | ‚úÖ | `void` |\r\n| `get()` | Get first header value | ‚ùå | `string | undefined` |\r\n| `getAll()` | Get all header values | ‚ùå | `string[]` |\r\n| `has()` | Check existence | ‚ùå | `boolean` |\r\n| `delete()` | Remove header | ‚úÖ | `boolean` |\r\n| `append()` | Add header value | ‚úÖ | `void` |\r\n| `toObject()` | Serialize headers | ‚ùå | `Record` |\r\n\r\n---\r\n"
    },
    {
      "originalPath": "9. Static File.md",
      "id": 20,
      "name": "Static File",
      "type": "file",
      "path": "static-file",
      "content": "\r\n---\r\n\r\n# **`static()` - Serve Static Files Efficiently**  \r\n\r\n## **Overview**  \r\n\r\nThe `static()` method allows serving static files (HTML, CSS, JS, images, videos, fonts, etc.) from a specified directory. It supports defining a **base route** or directly serving from the **root (`/`)** while offering customizable options like caching and indexing.  \r\n\r\n## **Usage**  \r\n\r\n### **1Ô∏è‚É£ Serve Static Files from the Root (`/`)**  \r\n\r\n```typescript\r\napp.static(\"./public\");\r\n```\r\n\r\n- Serves files from the **\"public\"** directory.  \r\n- Example: A file `public/style.css` will be accessible at `http://yourdomain.com/style.css`.  \r\n\r\n### **2Ô∏è‚É£ Serve Static Files from a Specific Route**  \r\n\r\n```typescript\r\napp.static(\"/static\", \"./assets\");\r\n```\r\n\r\n- Serves files from the **\"assets\"** directory under `/static`.  \r\n- Example: `assets/logo.png` will be available at `http://yourdomain.com/static/logo.png`.  \r\n\r\n### **3Ô∏è‚É£ Serve Static Files with Options**  \r\n\r\n```typescript\r\napp.static(\"./public\", { \r\n    cacheControl: \"public, max-age=3600\", \r\n     });\r\n```\r\n\r\n- Enables HTTP caching with **Cache-Control headers**.  \r\n\r\n---\r\n\r\n## **Method Signature**\r\n\r\n```typescript\r\nstatic(route: string, folder: string, option?: StaticServeOption): this;\r\nstatic(folder: string, option?: StaticServeOption): this;\r\n```\r\n\r\n## **Parameters**\r\n\r\n| Parameter        | Type                         | Description |\r\n|-----------------|----------------------------|-------------|\r\n| `route` _(optional)_ | `string` | The base route to serve static files from (e.g., `/public`). If omitted, files are served from `/`. |\r\n| `folder` | `string` | The directory containing static files. |\r\n| `option` _(optional)_ | `StaticServeOption` | Additional options for static file serving. |\r\n\r\n---\r\n\r\n## **üìå Available Options (`StaticServeOption`)**\r\n\r\nThe `option` parameter allows configuring various settings for serving static files.\r\n\r\n| Option          | Type      | Default  | Description |\r\n|----------------|----------|----------|-------------|\r\n| `cacheControl` | `string` | `\"no-cache\"` | Controls HTTP caching for files. Example: `\"public, max-age=3600\"` for 1-hour caching. |\r\n| `header`         | `HeaderResponse` | `undefined` | Record of headers |\r\n\r\n---\r\n\r\n## **üîπ Example Implementations**\r\n\r\n### **1Ô∏è‚É£ Enable Cache-Control for Performance**\r\n\r\n```typescript\r\napp.static(\"./public\", { cacheControl: \"public, max-age=86400\" });  // 1-day caching\r\n```\r\n\r\n## **üöÄ Return Value**\r\n\r\nReturns the current instance (`this`), allowing **method chaining**:\r\n\r\n```typescript\r\napp.static(\"./public\").use(middlewareFunction);\r\n```\r\n\r\n---\r\n\r\n## **üìù Notes**\r\n\r\n- Automatically detects **MIME types** for proper `Content-Type` headers.  \r\n- Ensures **secure file path resolution** to prevent directory traversal attacks.  \r\n- Works seamlessly across **Node.js, Deno, and Bun** with minimal modifications.  \r\n- Supports both **absolute and relative** folder paths.  \r\n\r\n---\r\n\r\nThis **enhanced documentation** includes:  \r\n‚úÖ **Detailed parameter descriptions**  \r\n‚úÖ **Comprehensive options table**  \r\n‚úÖ **Real-world use cases**  \r\n‚úÖ **Security & performance best practices**  \r\n\r\n<https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control>\r\n\r\n## **You can Overwrite static path**\r\n\r\n```ts\r\nserver.get('/static/image.png',(ctx)=>{\r\n    //-------------\r\n    //------------- code \r\n    //-------------\r\n    //-------------\r\n})\r\n```\r\n"
    },
    {
      "originalPath": "97. Middlewares",
      "name": "Middlewares",
      "path": "middlewares",
      "type": "folder",
      "children": [
        {
          "originalPath": "1. CORS Middleware.md",
          "id": 21,
          "name": "CORS Middleware",
          "type": "file",
          "path": "middlewares/cors-middleware",
          "content": "\r\n---\r\n\r\n# CORS Middleware\r\n\r\n## **Overview**\r\n\r\nMiddleware for handling Cross-Origin Resource Sharing (CORS) headers. Supports dynamic origin validation, preflight requests, and granular control over allowed methods/headers.\r\n\r\n---\r\n\r\n## **Installation & Basic Usage**\r\n\r\n```typescript\r\nimport { cors } from 'tejx';\r\n\r\n// Basic setup (allow all origins)\r\napp.use(cors());\r\n\r\n// Advanced configuration\r\napp.use(cors({\r\n  origin: ['https://trusted.com', /\\.example\\.com$/],\r\n  methods: ['GET', 'POST'],\r\n  credentials: true\r\n}));\r\n```\r\n\r\n---\r\n\r\n## **Configuration Options (`CorsOptions`)**\r\n\r\n| Property          | Type                                      | Default                          | Description                                                                 |\r\n|-------------------|-------------------------------------------|----------------------------------|-----------------------------------------------------------------------------|\r\n| `origin`          | `string RegExp  (string RegExp)[]  ((origin: string) => boolean)` | `*` (allow all)            | Controls allowed origins                                                    |\r\n| `methods`         | `string[]`                                | `[\"GET\", \"POST\", \"PUT\", \"DELETE\"]` | HTTP methods allowed in CORS requests                                       |\r\n| `allowedHeaders`  | `string[]`                                | `[\"Content-Type\", \"Authorization\"]` | Headers clients can send                                                    |\r\n| `exposedHeaders`  | `string[]`                                | (none)                          | Headers exposed to client                                                   |\r\n| `credentials`     | `boolean`                                 | `false`                         | Allow cookies/credentials                                                   |\r\n| `maxAge`          | `number`                                  | (none)                          | Preflight cache duration in seconds                                         |\r\n\r\n---\r\n\r\n## **Detailed Behavior**\r\n\r\n### **1. Origin Handling**\r\n\r\n#### **Static Origin**\r\n\r\n```typescript\r\ncors({ origin: 'https://strict-domain.com' });\r\n```\r\n\r\n#### **Multiple Origins**\r\n\r\n```typescript\r\ncors({ \r\n  origin: [\r\n    'https://app.com',\r\n    'http://localhost:3000',\r\n    /\\.staging\\.com$/ // Regex support\r\n  ] \r\n});\r\n```\r\n\r\n#### **Dynamic Validation**\r\n\r\n```typescript\r\ncors({\r\n  origin: (requestOrigin) => {\r\n    return validateOriginAgainstDB(requestOrigin); // Async supported via ctx\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. Preflight Handling**\r\n\r\nAutomatically responds to `OPTIONS` requests:\r\n\r\n```http\r\nOPTIONS /resource HTTP/1.1\r\nOrigin: https://client.com\r\nAccess-Control-Request-Method: DELETE\r\nAccess-Control-Request-Headers: X-Custom-Header\r\n```\r\n\r\n**Response**:\r\n\r\n```http\r\nHTTP/1.1 204 No Content\r\nAccess-Control-Allow-Origin: https://client.com\r\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\r\nAccess-Control-Allow-Headers: X-Custom-Header\r\nAccess-Control-Max-Age: 86400\r\n```\r\n\r\n---\r\n\r\n### **3. Credential Handling**\r\n\r\nWhen enabled:\r\n\r\n```typescript\r\ncors({ credentials: true });\r\n```\r\n\r\nSets header:\r\n\r\n```http\r\nAccess-Control-Allow-Credentials: true\r\n```\r\n\r\n---\r\n\r\n## **Response Headers**\r\n\r\nThe middleware sets these headers automatically:\r\n\r\n| Header                           | Value Example                          |\r\n|----------------------------------|----------------------------------------|\r\n| `Access-Control-Allow-Origin`    | `https://trusted.com`                  |\r\n| `Access-Control-Allow-Methods`   | `GET, POST`                            |\r\n| `Access-Control-Allow-Headers`   | `Content-Type, Authorization`          |\r\n| `Access-Control-Expose-Headers`  | `X-Custom-Header`                      |\r\n| `Access-Control-Max-Age`         | `3600`                                 |\r\n| `Access-Control-Allow-Credentials` | `true`                               |\r\n\r\n---\r\n\r\n## **Advanced Examples**\r\n\r\n### **1. Per-Route CORS Configuration**\r\n\r\n```typescript\r\n// Apply to specific route\r\napp.get(\r\n  '/api/data',\r\n  cors({\r\n    origin: 'https://specific-client.com',\r\n    methods: ['GET']\r\n  }),\r\n  dataHandler\r\n);\r\n```\r\n\r\n### **2. Combining with Authentication**\r\n\r\n```typescript\r\napp.use(cors({\r\n  origin: 'https://app.com',\r\n  allowedHeaders: ['Authorization', 'X-API-Key'],\r\n  credentials: true\r\n}));\r\n\r\napp.use(authMiddleware); // Reads Authorization header\r\n```\r\n\r\n### **3. Long Cache Preflight**\r\n\r\n```typescript\r\ncors({\r\n  maxAge: 86400 // 24-hour cache\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Error Handling**\r\n\r\nThe middleware **does not** throw errors for invalid origins. Instead:\r\n\r\n- Sets empty `Access-Control-Allow-Origin` for invalid origins\r\n- Returns 204 for OPTIONS requests regardless of origin validity\r\n- Relies on browser enforcement of CORS policies\r\n\r\n**To implement strict blocking**:\r\n\r\n```typescript\r\napp.use(cors({\r\n  origin: (origin) => {\r\n    if (!isValid(origin)) {\r\n      throw new Error('Invalid origin'); // Will propagate\r\n    }\r\n    return origin;\r\n  }\r\n}));\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n1. **Avoid Wide Open CORS**  \r\n\r\n   ```typescript\r\n   // ‚ùå Dangerous in production\r\n   cors({ origin: '*' }); \r\n\r\n   // ‚úÖ Restrictive setup\r\n   cors({ origin: process.env.ALLOWED_ORIGINS });\r\n   ```\r\n\r\n2. **Limit Exposed Headers**  \r\n\r\n   ```typescript\r\n   cors({\r\n     exposedHeaders: ['X-RateLimit-Limit', 'X-RateLimit-Remaining']\r\n   });\r\n   ```\r\n\r\n3. **Use Credentials Sparingly**  \r\n\r\n   ```typescript\r\n   // Only enable when cookies/auth needed\r\n   cors({ credentials: true });\r\n   ```\r\n\r\n4. **Combine with Rate Limiting**  \r\n\r\n   ```typescript\r\n   app.use(rateLimiter());\r\n   app.use(cors());\r\n   ```\r\n\r\n---\r\n\r\n## **Regex-Specific Features**\r\n\r\n### **1. Regex Origin Patterns**\r\n\r\nMatch origins using regular expressions:\r\n\r\n```typescript\r\n// Allow all subdomains of example.com\r\ncors({ origin: /\\.example\\.com$/ });\r\n\r\n// Allow specific patterns\r\ncors({ origin: /https:\\/\\/app-(dev|staging)\\.com/ });\r\n```\r\n\r\n### **2. Mixed Array Support**\r\n\r\nCombine strings and regexes in the origin array:\r\n\r\n```typescript\r\ncors({\r\n  origin: [\r\n    'https://production.com',\r\n    /\\.staging\\.com$/,\r\n    'http://localhost:3000'\r\n  ]\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Matching Logic**\r\n\r\n### **Priority Order**\r\n\r\n1. **String Exact Match**  \r\n   `'https://exact-domain.com'`\r\n\r\n2. **Regex Pattern Test**  \r\n   `/\\.domain\\.com$/`\r\n\r\n3. **Array Membership Check**  \r\n   (Strings or regexes)\r\n\r\n4. **Function Validation**  \r\n   Custom logic\r\n\r\n### **Matching Flow**\r\n\r\n```js\r\ngraph TD\r\n    A[Request Origin] --> B{Is origin string?}\r\n    B -->|Yes| C[Exact match]\r\n    B -->|No| D{Is origin regex?}\r\n    D -->|Yes| E[Regex test]\r\n    D -->|No| F{Is array?}\r\n    F -->|Yes| G[Check array elements]\r\n    F -->|No| H{Is function?}\r\n    H -->|Yes| I[Function validation]\r\n```\r\n\r\n---\r\n\r\n## **Examples**\r\n\r\n### **1. Regex Origin Validation**\r\n\r\n```typescript\r\n// Allow all subdomains and local development\r\ncors({\r\n  origin: [\r\n    /\\.company\\.com$/,\r\n    /localhost:\\d+/,\r\n    'https://partner-site.com'\r\n  ]\r\n});\r\n```\r\n\r\n### **2. Dynamic Regex Generation**\r\n\r\n```typescript\r\nconst dynamicOrigins = [\r\n  new RegExp(`${process.env.ALLOWED_SUBDOMAINS_REGEX}`),\r\n  process.env.PRIMARY_DOMAIN\r\n];\r\n\r\napp.use(cors({ origin: dynamicOrigins }));\r\n```\r\n\r\n### **3. Regex + Function Combination**\r\n\r\n```typescript\r\ncors({\r\n  origin: (origin) => {\r\n    const isLocal = /localhost:\\d+/.test(origin);\r\n    return isLocal || someOtherCheck(origin);\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Special Cases**\r\n\r\n### **Regex Edge Handling**\r\n\r\n```typescript\r\n// Match exact domain with regex\r\ncors({ origin: /^https:\\/\\/exact\\.com$/ }); \r\n\r\n// Allow HTTP and HTTPS\r\ncors({ origin: /^https?:\\/\\/app\\.com$/ });\r\n```\r\n\r\n### **Port Matching**\r\n\r\n```typescript\r\n// Allow any localhost port\r\ncors({ origin: /http:\\/\\/localhost:\\d+/ });\r\n```\r\n\r\n---\r\n\r\n## **Security Considerations**\r\n\r\n1. **Anchored Patterns**  \r\n   Always anchor regexes to prevent partial matches:\r\n\r\n   ```typescript\r\n   // ‚ùå Vulnerable to \"evil-example.com\"\r\n   /example\\.com/ \r\n\r\n   // ‚úÖ Secure match\r\n   /^https:\\/\\/.*\\.example\\.com$/\r\n   ```\r\n\r\n2. **Escape Special Characters**  \r\n\r\n   ```typescript\r\n   const domain = 'special.domain.com';\r\n   const escaped = domain.replace(/\\./g, '\\\\.');\r\n   new RegExp(`^https://${escaped}$`);\r\n   ```\r\n\r\n3. **Combine with Allow Lists**  \r\n\r\n   ```typescript\r\n   const allowed = loadFromDB(); // ['trusted.com', ...]\r\n   cors({ origin: allowed.concat([/\\.safe-domain\\.com$/]) });\r\n   ```\r\n\r\n---\r\n\r\n## **Debugging Tips**\r\n\r\n### **Test Regex Patterns**\r\n\r\n```typescript\r\nconst testOrigin = \"https://app.staging.com\";\r\nconst regex = /\\.staging\\.com$/;\r\nconsole.log(regex.test(testOrigin)); // true\r\n```\r\n\r\n### **Log Matched Origins**\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  console.log('CORS Origin:', ctx.headers.get('origin'));\r\n  return next();\r\n});\r\n```\r\n\r\n---\r\n\r\n## **API Reference**\r\n\r\n### **cors(options?: CorsOptions)**\r\n\r\n**Returns:** Middleware function\r\n\r\n**Flow:**\r\n\r\n1. Validates request origin\r\n2. Sets CORS response headers\r\n3. Short-circuits OPTIONS requests\r\n4. Proceeds to next middleware for non-OPTIONS\r\n\r\n---\r\n"
        }
      ]
    },
    {
      "originalPath": "98. Helpers",
      "name": "Helpers",
      "path": "helpers",
      "type": "folder",
      "children": [
        {
          "originalPath": "Load Environment‚ù§Ô∏è‚Äçüî•.md",
          "id": 22,
          "name": "Load Environment‚ù§Ô∏è‚Äçüî•",
          "type": "file",
          "path": "helpers/load-environment",
          "content": "\r\n---\r\n\r\n## **Core Components**\r\n\r\n### **1. `loadEnv(basePath?: string)`**\r\n\r\n**Purpose:** Loads environment variables from `.env` files  \r\n**Parameters:**\r\n\r\n- `basePath` (optional): Directory containing `.env` files (default: current working directory)\r\n\r\n**Supported Files:**\r\n\r\n```js\r\n.env                # Base environment\r\n.env.local          # Local overrides\r\n.env.[mode]         # Environment-specific (e.g., .env.production)\r\n.env.[mode].local   # Mode-specific local overrides\r\n```\r\n\r\n**Return Type:**  \r\n\r\n```typescript\r\ninterface EnvVariables {\r\n  [key: string]: string;\r\n  NODE_ENV: 'development' | 'production' | 'test';\r\n  PORT?: string;\r\n  API_KEY?: string;\r\n  // ... other variables\r\n}\r\n```\r\n\r\n**Example:**\r\n\r\n```typescript\r\n// Load from specific directory\r\nconst env = loadEnv('./config');\r\n\r\n// Access variables\r\nconst port = env.PORT || '3000';\r\n```\r\n\r\n---\r\n\r\n### **2. `CustomContext` Interface**\r\n\r\n**Extends base context with application-specific properties:**\r\n\r\n```typescript\r\ninterface CustomContext {\r\n  user?: {\r\n    id: string;\r\n    roles: string[];\r\n  };\r\n  requestId: string;\r\n  // Add custom properties as needed\r\n}\r\n```\r\n\r\n**Usage in Middleware:**\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID();\r\n  ctx.user = await authenticate(ctx.headers.get('Authorization'));\r\n  return await next();\r\n});\r\n```\r\n\r\n---\r\n\r\n### **3. Server Initialization**\r\n\r\n**Type-Safe Configuration:**\r\n\r\n```typescript\r\nconst server = new Accelero<CustomContext>({\r\n  env: loadEnv(),\r\n  // Other options\r\n});\r\n```\r\n\r\n**Configuration Options:**\r\n\r\n| Option | Type | Default | Description |\r\n|--------|------|---------|-------------|\r\n| `env` | `EnvVariables` | `process.env` or `Deno.env` | Environment variables container |\r\n\r\n---\r\n\r\n## **Complete Workflow Example**\r\n\r\n### **1. Basic Setup**\r\n\r\n```typescript\r\n// Load environment variables\r\nconst env = loadEnv();\r\n\r\n// Initialize server\r\nconst server = new Accelero({\r\n  env,\r\n  logger: logger\r\n});\r\n\r\n// Access env in middleware\r\nserver.use((ctx) => {\r\n  if (ctx.env.API_KEY !== 'expected') {\r\n    ctx.status(401).text('Unauthorized');\r\n  }\r\n});\r\n```\r\n\r\n### **2. Advanced Context Usage**\r\n\r\n```typescript\r\ninterface AppContext {\r\n  user?: UserProfile;\r\n  requestId: string;\r\n  analytics: AnalyticsTracker;\r\n}\r\n\r\nconst server = new Accelero<AppContext>({\r\n  env: loadEnv('./env'),\r\n});\r\n\r\n// Middleware to extend context\r\nserver.use(async (ctx, next) => {\r\n  ctx.analytics = new Analytics(ctx.env.ANALYTICS_KEY);\r\n  ctx.analytics.flush();\r\n  return await next();\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Environment Management**\r\n\r\n```typescript\r\n// .env.production\r\nNODE_ENV=production\r\nPORT=443\r\nAPI_KEY=prod_abcdef\r\n\r\n// .env.development\r\nNODE_ENV=development\r\nPORT=3000\r\nAPI_KEY=dev_123456\r\n```\r\n\r\n### **2. Security**\r\n\r\n```text\r\n# .gitignore\r\n.env.local\r\n.env.*.local\r\n```\r\n\r\n---\r\n\r\n**Example:**\r\n\r\n```typescript\r\nif (env.DEBUG) enableDebugging();\r\n```\r\n\r\n---\r\n"
        },
        {
          "originalPath": "Logger‚ù§Ô∏è‚Äçüî•.md",
          "id": 23,
          "name": "Logger‚ù§Ô∏è‚Äçüî•",
          "type": "file",
          "path": "helpers/logger",
          "content": "\r\nThe JetCore logger provides a flexible logging system that integrates with request/response cycles and supports custom log levels. It follows the **LoggerFnType** interface for structured logging.\r\n\r\n---\r\n\r\n## **Quick Start**\r\n\r\n### **Basic Setup**\r\n\r\n```typescript\r\nimport { JetCore } from \"jet-core\";\r\nimport { loadEnv } from \"./config\";\r\n\r\nconst logger = () => ({\r\n  info: (msg) => console.log(`[INFO] ${msg}`),\r\n  error: (msg) => console.error(`[ERROR] ${msg}`)\r\n});\r\n\r\nconst server = new JetCore({\r\n  logger: logger,\r\n  env: loadEnv()\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Logger Configuration**\r\n\r\n### **LoggerFnType Interface**\r\n\r\n```typescript\r\ntype LoggerFnType = () => {\r\n  request?: (method: HTTPMethod, pathname: string) => void;\r\n  response?: (method: HTTPMethod, pathname: string, status?: number) => void;\r\n  info?: (msg: string, ...args: unknown[]) => void;\r\n  warn?: (msg: string, ...args: unknown[]) => void;\r\n  error?: (msg: string, ...args: unknown[]) => void;\r\n  debug?: (msg: string, ...args: unknown[]) => void;\r\n  success?: (msg: string, ...args: unknown[]) => void;\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Core Methods**\r\n\r\n### **1. Request/Response Tracking**\r\n\r\n| Method | Parameters | Description |\r\n|--------|------------|-------------|\r\n| `request` | `method`, `pathname` | Logs incoming requests |\r\n| `response` | `method`, `pathname`, `status` | Logs completed responses |\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconst logger = () => ({\r\n  request: (method, path) => {\r\n    console.log(`‚ûî ${method} ${path}`);\r\n  },\r\n  response: (method, path, status) => {\r\n    console.log(`‚Üê ${status} ${method} ${path}`);\r\n  }\r\n});\r\n```\r\n\r\n### **2. Log Levels**\r\n\r\n| Method | Use Case | Example Output |\r\n|--------|----------|----------------|\r\n| `info` | General information | `[INFO] Server started on port 3000` |\r\n| `warn` | Non-critical issues | `[WARN] High memory usage detected` |\r\n| `error` | Critical errors | `[ERROR] Database connection failed` |\r\n| `debug` | Debugging details | `[DEBUG] Route matched: /api/users` |\r\n| `success` | Positive outcomes | `[SUCCESS] User created: ID-123` |\r\n\r\n---\r\n\r\n## **Advanced Configuration**\r\n\r\n### **Environment-Based Logging**\r\n\r\n```typescript\r\nconst logger = () => {\r\n  const isProduction = process.env.NODE_ENV === 'production';\r\n  \r\n  return {\r\n    debug: isProduction ? undefined : (msg) => console.debug(msg),\r\n    info: (msg) => console.info(msg),\r\n    error: (msg) => console.error(msg)\r\n  };\r\n};\r\n```\r\n\r\n### **Custom Log Format**\r\n\r\n```typescript\r\nconst logger = () => ({\r\n  info: (msg, ...args) => {\r\n    const timestamp = new Date().toISOString();\r\n    console.log(`[${timestamp}] INFO: ${msg}`, ...args);\r\n  },\r\n  error: (msg, ...args) => {\r\n    const timestamp = new Date().toISOString();\r\n    console.error(`[${timestamp}] ERROR: ${msg}`, ...args);\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Integration Examples**\r\n\r\n### **Third-Party Integration (Winston)**\r\n\r\n```typescript\r\nimport winston from 'winston';\r\n\r\nconst logger = () => {\r\n  const winstonLogger = winston.createLogger({/* config */});\r\n  \r\n  return {\r\n    info: (msg) => winstonLogger.info(msg),\r\n    error: (msg) => winstonLogger.error(msg),\r\n    debug: (msg) => winstonLogger.debug(msg)\r\n  };\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Production Configuration**\r\n\r\n```typescript\r\nconst prodLogger = () => ({\r\n  info: (msg) => console.log(msg),\r\n  error: (msg) => console.error(msg),\r\n  warn: (msg) => console.warn(msg)\r\n});\r\n```\r\n\r\n### **2. Performance Considerations**\r\n\r\n```typescript\r\n// Only enable debug logs when needed\r\nconst logger = () => ({\r\n  debug: process.env.DEBUG_MODE \r\n    ? (msg) => console.debug(msg)\r\n    : undefined\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Troubleshooting**\r\n\r\n### **Common Issues**\r\n\r\n| Symptom | Solution |\r\n|---------|----------|\r\n| Logs not appearing | Ensure method is implemented in logger config |\r\n| Missing request/response logs | Verify `request`/`response` methods are defined |\r\n| Performance impact | Disable debug logs in production |\r\n\r\n---\r\n"
        }
      ]
    },
    {
      "originalPath": "99. Examples",
      "name": "Examples",
      "path": "examples",
      "type": "folder",
      "children": [
        {
          "originalPath": "1. Uploader.md",
          "id": 24,
          "name": "Uploader",
          "type": "file",
          "path": "examples/uploader",
          "content": "```ts\r\nimport { join } from 'path';\r\nimport { writeFile } from 'fs/promises';\r\n\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file uploaded\" }, 400);\r\n    }\r\n\r\n    try {\r\n        const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n        const filePath = join(process.cwd(), 'uploads', file.name); // Define file path\r\n\r\n        await writeFile(filePath, Buffer.from(buffer)); // Save file\r\n\r\n        return ctx.json({ \r\n            message: \"File uploaded successfully\", \r\n            path: filePath \r\n        });\r\n    } catch (error: any) {\r\n        return ctx.json({ \r\n            error: \"File save failed\", \r\n            details: error.message \r\n        }, 500);\r\n    }\r\n});\r\n```\r\n"
        }
      ]
    }
  ],
  "files": [
    {
      "id": 1,
      "path": "release-note/tsfsd",
      "name": "Tsfsd",
      "folder": "Release Note",
      "content": "tsrfc\r\nInstallation\r\nConfiguration\r\nLogger Function\r\n"
    },
    {
      "id": 2,
      "path": "need-to-know",
      "name": "Need To Know",
      "folder": ".",
      "content": "\r\n## Compatibility\r\n\r\n- params (`:id`)\r\n- wildcard (`/*path` or `/*`)\r\n- optional params (`/:id?`)\r\n\r\n### 1. Router\r\n\r\n- not support directly wildcard and optional params. (use `basePath` ‚úÖ)\r\n\r\n```ts\r\nconst account = new Router<CustomContext>({\r\n    basePath: '/account/:role?'\r\n});\r\n  ```\r\n\r\n### 2. Overwritten router (method)\r\n\r\n- Method will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n- not found Handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n```ts\r\n// ‚ùå Conflicting routes \r\n// ‚ùì Will be overwritten by the last handler.\r\n// Output: {name: \"Jhon\"}\r\nserver.get(\"/users/:id\", handleUser);\r\nserver.get(\"/users/:name\", handleByName); // Will execute be reached\r\n\r\n// ‚úÖ Solution: Use distinct paths\r\nserver.get(\"/users/id/:id\", handleUser);\r\nserver.get(\"/users/name/:name\", handleByName);\r\n```\r\n\r\n### 3. Matching Priority\r\n\r\nRoutes are matched with following priority order:\r\n\r\n1. Static paths (`/users/list`)\r\n2. Named parameters (`/users/:id`)\r\n3. Wildcard parameters (`/users/*`)\r\n4. Optional parameters (`/users/:id?`)\r\n"
    },
    {
      "id": 3,
      "path": "getting-started/installation",
      "name": "Installation",
      "folder": "Getting Started",
      "content": ""
    },
    {
      "id": 4,
      "path": "getting-started/configuration",
      "name": "Configuration",
      "folder": "Getting Started",
      "content": ""
    },
    {
      "id": 5,
      "path": "getting-started/node",
      "name": "Node",
      "folder": "Getting Started",
      "content": ""
    },
    {
      "id": 6,
      "path": "getting-started/bun",
      "name": "Bun",
      "folder": "Getting Started",
      "content": ""
    },
    {
      "id": 7,
      "path": "getting-started/deno",
      "name": "Deno",
      "folder": "Getting Started",
      "content": ""
    },
    {
      "id": 8,
      "path": "api/middleware-api/middleware-settings",
      "name": "Middleware Settings",
      "folder": "API/Middleware API",
      "content": "Here‚Äôs a refined version of `GlobalConfig` to handle both **chaining middleware** and **skipping group middleware**:  \r\n\r\n```typescript\r\nexport let GlobalConfig = class {\r\n    static middlewareExecuteType: \"chaining\" | \"skip-group\" = \"chaining\"; \r\n    static env: Record<string, string | number> = {}; \r\n\r\n    static setMiddlewareExecution(type: \"chaining\" | \"skip-group\") {\r\n        this.middlewareExecuteType = type;\r\n    }\r\n\r\n    static getMiddlewareExecution(): \"chaining\" | \"skip-group\" {\r\n        return this.middlewareExecuteType;\r\n    }\r\n\r\n    static shouldExecuteGroupMiddleware(): boolean {\r\n        return this.middlewareExecuteType === \"chaining\"; // Executes group middleware only if in chaining mode\r\n    }\r\n};\r\n```\r\n\r\n---\r\n\r\n### **How This Works**\r\n\r\n- **`chaining` Mode**:  \r\n  - Parent middleware + group middleware + route middleware all execute.  \r\n- **`skip-group` Mode**:  \r\n  - Skips **group middleware** and directly executes route middleware.  \r\n- **`shouldExecuteGroupMiddleware()`**  \r\n  - Returns `true` if middleware execution is in **chaining** mode.  \r\n  - Returns `false` if **group middleware should be skipped**.  \r\n\r\n---\r\n\r\n#### **Example Execution Based on Mode**\r\n\r\n‚úÖ **For `/api/admin/settings` with `chaining`:**\r\n\r\n1. Parent middleware (`/api`)  \r\n2. Group middleware (`/api/admin`)  \r\n3. Route middleware (`/api/admin/settings`)  \r\n\r\n‚ùå **For `/api/admin/settings` with `skip-group`:**\r\n\r\n1. Parent middleware (`/api`)  \r\n2. üö´ Skips **group middleware** (`/api/admin`)  \r\n3. Route middleware (`/api/admin/settings`)  \r\n\r\nWould you like a function that dynamically decides which middlewares to apply? üöÄ\r\nstatic middlewareStrategy: \"inherit\" | \"isolated\" = \"inherit\";\r\n"
    },
    {
      "id": 9,
      "path": "api/middleware-api/middleware",
      "name": "Middleware",
      "folder": "API/Middleware API",
      "content": "\r\n### `use(...args)`\r\n\r\n**Flexible middleware registration**\r\n\r\n### **2. Middleware Guidelines**\r\n\r\n```ts\r\n// Good practice - fail fast\r\nserver.use((ctx, next) => {\r\n  if (!ctx.headers.get('x-api-key')) {\r\n    return ctx.status(401);\r\n  }\r\n  return next();\r\n});\r\n\r\n// Error handling\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (error) {\r\n    ctx.status(500).json({ error: error.message });\r\n  }\r\n});\r\n```\r\n\r\n### **3. Performance Tips**\r\n\r\n- **Lazy-load** heavy middleware after path matching\r\n- **Limit** deep nesting (max 3 levels recommended)\r\n- **Cache** frequent route parameters\r\n- **Prefer** sync middleware for simple operations\r\n\r\n---\r\n\r\n## **Error Handling**\r\n\r\n### **Centralized Error Management**\r\n\r\n```ts\r\n// Global error handler\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (error) {\r\n    ctx.status(500).json({\r\n      code: 'INTERNAL_ERROR',\r\n      message: process.env.NODE_ENV === 'prod' \r\n        ? 'Something went wrong' \r\n        : error.message\r\n    });\r\n  }\r\n});\r\n\r\n// Route-specific error handling\r\nserver.get('/danger', async (ctx) => {\r\n  try {\r\n    await riskyOperation();\r\n  } catch (error) {\r\n    ctx.status(400).json({ error: 'Safe error message' });\r\n  }\r\n});\r\n```\r\n\r\n**Signatures:**\r\n\r\n```typescript\r\n// Global middleware\r\nuse(middleware: MiddlewareType)\r\n\r\n// Path-scoped middleware\r\nuse(path: string, middleware: MiddlewareType)\r\n\r\n// Multiple middlewares\r\nuse(path: string, middlewares: MiddlewareType[])\r\n\r\n// With sub-router\r\nuse(path: string, middleware: MiddlewareType, router: Router)\r\n```\r\n\r\n**Middleware Types:**\r\n\r\n```typescript\r\ntype MiddlewareType = (\r\n  ctx: Context,\r\n  next: () => Promise<void>\r\n) => Promise<void> | void;\r\n```\r\n\r\n---\r\n\r\n## Middleware System\r\n\r\n### Lifecycle\r\n\r\n1. Incoming Request\r\n2. Global Middlewares\r\n3. Path-matched Middlewares\r\n4. Route Handler\r\n5. Response Middlewares\r\n6. Error Middlewares (if needed)\r\n\r\n### Error Handling\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (err) {\r\n    ctx.status(500).json({ error: err.message });\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Examples\r\n\r\n### Basic Routing\r\n\r\n```typescript\r\nserver.get('/', (ctx) => ctx.text('Home'));\r\nserver.post('/users', createUser);\r\n```\r\n\r\n### Middleware Chain\r\n\r\n```typescript\r\nserver.use(logger);\r\n\r\nserver.use('/admin', (ctx, next) => {\r\n  if (!ctx.user.isAdmin) ctx.throw(403);\r\n  return next();\r\n});\r\n\r\nserver.get('/admin/dashboard', adminDashboard);\r\n```\r\n\r\n### Route Grouping\r\n\r\n```typescript\r\nserver.group('/api', (api) => {\r\n  api.group('/v1', (v1) => {\r\n    v1.get('/users', getUsersV1);\r\n  });\r\n  \r\n  api.group('/v2', (v2) => {\r\n    v2.get('/users', getUsersV2);\r\n  });\r\n});\r\n```\r\n\r\n### Sub-router Mounting\r\n\r\n```typescript\r\nconst authRouter = new Router();\r\nauthRouter.post('/login', loginHandler);\r\nauthRouter.post('/register', registerHandler);\r\n\r\nserver.use('/auth', [rateLimiter], authRouter);\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Organize Routes**\r\n\r\n```text\r\n/src\r\n  /routes\r\n    auth.ts\r\n    users.ts\r\n    admin/\r\n      index.ts\r\n      audit.ts\r\n```\r\n\r\n2. **Middleware Order**\r\n\r\n```typescript\r\n// Global first\r\nserver.use(cors());\r\nserver.use(bodyParser());\r\n\r\n// Then specific routes\r\nserver.post('/upload', fileUpload, uploadHandler);\r\n\r\n// Error handlers last\r\nserver.use(errorFormatter);\r\n```\r\n\r\n3. **Performance Tips**\r\n\r\n- Avoid blocking sync operations in middleware\r\n- Cache expensive operations\r\n- Use route-specific middleware when possible\r\n\r\n---\r\n\r\n## Error Handling\r\n\r\n### Custom Error Middleware\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  try {\r\n    await next();\r\n  } catch (err) {\r\n    ctx.status(err.statusCode || 500);\r\n    ctx.json({\r\n      error: err.message,\r\n      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## Troubleshooting\r\n\r\n### Common Issues\r\n\r\n**Middleware Not Executing**\r\n\r\n- Check registration order\r\n- Verify path matches\r\n- Ensure `next()` is called\r\n\r\n**Route Conflicts**\r\n\r\n- More specific routes first\r\n- Use `server.all()` carefully\r\n- Check sub-router mounting points\r\n\r\n**Type Errors**\r\n\r\n- Use generics for context typing:\r\n\r\n```typescript\r\ninterface AppContext {\r\n  user: User;\r\n  cache: Cache;\r\n}\r\n\r\nconst app = new Router<AppContext>();\r\n```\r\n\r\n---\r\n\r\n## TypeScript Support\r\n\r\n### Key Interfaces\r\n\r\n```typescript\r\ninterface RouterOptions {\r\n  basePath?: string;\r\n  env?: Record<string, unknown>;\r\n  onError?: ErrorHandler;\r\n}\r\n\r\ntype MiddlewareType<T = any> = (\r\n  ctx: Context<T>,\r\n  next: () => Promise<void>\r\n) => Promise<void> | void;\r\n\r\ntype HTTPMethod = \r\n  | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\r\n  | 'OPTIONS' | 'HEAD' | 'ALL';\r\n```\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\nThis router system provides:\r\n\r\n- ‚úÖ Nested route organization\r\n- ‚úÖ Flexible middleware system\r\n- ‚úÖ Type-safe development\r\n- ‚úÖ Enterprise-scale capabilities\r\n\r\nAlways follow these patterns for best results:\r\n\r\n1. Organize routes hierarchically\r\n2. Keep middleware focused\r\n3. Use TypeScript interfaces\r\n4. Handle errors centrally\r\n"
    },
    {
      "id": 10,
      "path": "api/router/router",
      "name": "Router",
      "folder": "API/Router",
      "content": "\r\n# Router API\r\n\r\n---\r\n\r\n## **Core Concepts**\r\n\r\n### **1. Router Class**\r\n\r\n**Hierarchical routing system with middleware support**\r\n\r\n| Feature              | Description                                                                 |\r\n|----------------------|-----------------------------------------------------------------------------|\r\n| **Nested Routing**   | Mount sub-routers with path prefixes                                        |\r\n| **Middleware Chain** | Sequential execution of pre/post processors                                 |\r\n| **Path Isolation**   | Routes inherit parent path prefix                                           |\r\n| **Type Propagation** | Maintain typed context through nested routers                               |\r\n\r\n---\r\n\r\n### **2. Middleware System**\r\n\r\n#### **Execution Flow**\r\n\r\n```js\r\ngraph TD\r\n  A[Request] --> B[Parent Middleware]\r\n  B --> C[Router Middleware]\r\n  C --> D[Route Middleware]\r\n  D --> E[Handler]\r\n  E --> F[Post Middleware]\r\n  F --> G[Response]\r\n```\r\n\r\n---\r\n\r\n### **2. Route Groups**\r\n\r\n#### Logical grouping of routes with shared configuration\r\n\r\n```ts\r\napp.group('/admin', (group) => {\r\n  // Shared middleware for admin routes\r\n  group.use(adminAuth, auditLogger);\r\n  \r\n  group.get('/users', getAdminUsers);\r\n  group.post('/config', updateConfig);\r\n});\r\n```\r\n\r\n---\r\n\r\n## **API Reference**\r\n\r\n### **1. `addRouter(path: string, router: Router)`**\r\n\r\n#### Mount sub-router with path prefix\r\n\r\n| Parameter | Type     | Description                              |\r\n|-----------|----------|------------------------------------------|\r\n| `path`    | `string` | Base path for all routes in sub-router   |\r\n| `router`  | `Router` | Configured router instance               |\r\n\r\n**Example:**\r\n\r\n```ts\r\nimport {Router} from \"tejx\";\r\n\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// Mount under /auth prefix\r\n// ‚ùå not support middleware chain. Please use app.use(....)\r\napp.addRouter('/auth', authRouter); \r\n// or\r\n//‚úÖ It support middleware chain\r\napp.use('/auth',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n```ts\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// ‚ùå not use wildcard\r\n// Mount under /auth prefix\r\napp.addRouter('/auth/*', authRouter);\r\n// or\r\n// ‚ùå not use wildcard\r\napp.use('/auth/*',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n```ts\r\nconst authRouter = new Router()\r\n  .post('/login', handleLogin)\r\n  .get('/logout', handleLogout);\r\n\r\n// ‚ùå not use optional params\r\n// Mount under /auth prefix\r\napp.addRouter('/auth/:version?', authRouter);\r\n// or\r\n// ‚ùå not ues optional params\r\napp.use('/auth/auth/:version?',authRouter);\r\n// Routes: /auth/login, /auth/logout\r\n```\r\n\r\n**Note** : If you `app.use` or `app.addRouter` with path pass a new Router path must be static or dynamic params.(not use wildcard and optional params)\r\n\r\nIf you want to use wildcards or optional parameters in the router:\r\n\r\n```ts\r\nconst account = new Router<CustomContext>({\r\n    basePath: '/account/:role?'\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. `group(prefix: string, callback: (router: Router) => void)`**\r\n\r\n**Support dynamic params, optional params, wildcard**\r\n**Create scoped route group**\r\n\r\n| Parameter  | Type       | Description                                     |\r\n|------------|------------|-------------------------------------------------|\r\n| `prefix`   | `string`   | Path segment for group                          |\r\n| `callback` | `function` | Receives group-specific router instance         |\r\n\r\n**Advanced Example:**\r\n\r\n```ts\r\napp.group('/api/v1', (group) => {\r\n  // Group-level middleware\r\n  group.use(apiVersionHeader('v1'), rateLimiter);\r\n  \r\n  // Nested group\r\n  group.group('/users', (userGroup) => {\r\n    userGroup.get('/:id', getUser);\r\n    userGroup.patch('/:id', updateUser);\r\n  });\r\n  \r\n  group.delete('/posts/:id', deletePost);\r\n});\r\n\r\n// Resulting paths:\r\n// /api/v1/users/123\r\n// /api/v1/posts/456\r\n```\r\n\r\n---\r\n\r\n## **Advanced Configuration**\r\n\r\n### **1. Middleware Scoping**\r\n\r\n```ts\r\n// Global middleware (applies to all routes)\r\n// Router-specific middleware\r\nconst paymentRouter = new Router()\r\n  .use(validateCreditCard)\r\n  .post('/charge', processPayment);\r\n\r\n// Route-specific middleware\r\napp.get(\r\n  '/admin/stats',\r\n  [adminAuth, geolock],\r\n  getStatistics\r\n);\r\n```\r\n\r\n### **2. Context Propagation**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\ninterface CustomContext {\r\n  user?: User;\r\n  requestId: string;\r\n}\r\n\r\nconst app = new Router<CustomContext>();\r\napp.use((ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID();\r\n  return next();\r\n});\r\n\r\napp.get('/profile', (ctx) => {\r\n  // ctx is typed as CustomContext\r\n  return ctx.json({ id: ctx.requestId });\r\n});\r\n```\r\n\r\n---\r\n\r\n### **3. Not Found**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\napp.notFound((ctx) => {\r\n    return ctx.text('Custom 404 Message', 404);\r\n});\r\n```\r\n\r\n`notFound` handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n---\r\n\r\n### **3. Error**\r\n\r\n**Type-safe context inheritance:**\r\n\r\n```ts\r\napp.onError((error,ctx) => {\r\n    return ctx.text(error, 500);\r\n});\r\n```\r\n\r\n`onError` handler will overwrite ‚Üí Descending (from parent to child) ‚úÖ\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Route Organization**\r\n\r\n```bash\r\nroutes/\r\n‚îú‚îÄ auth/\r\n‚îÇ  ‚îú‚îÄ login.ts\r\n‚îÇ  ‚îú‚îÄ logout.ts\r\n‚îú‚îÄ api/\r\n‚îÇ  ‚îú‚îÄ v1/\r\n‚îÇ  ‚îÇ  ‚îú‚îÄ users.ts\r\n‚îÇ  ‚îú‚îÄ v2/\r\n‚îÇ     ‚îú‚îÄ users.ts\r\n```\r\n\r\n---\r\n<!-- \r\n## **Configuration Options**\r\n\r\n```ts\r\nnew Router({\r\n  caseSensitive: false, // /Users vs /users\r\n  strictPaths: true,    // /users/ vs /users\r\n  maxNesting: 5,        // Prevent infinite loops\r\n  autoHead: true        // Auto-create HEAD routes\r\n});\r\n``` -->\r\n"
    },
    {
      "id": 11,
      "path": "api/router/route-parameter",
      "name": "Route Parameter",
      "folder": "API/Router",
      "content": "\r\n---\r\n\r\n## Parameter Types\r\n\r\n### 1. Standard Parameters (`:param`)\r\n\r\nCapture dynamic path segments between slashes\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/:parameterName\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/users/:id\", (ctx) => {\r\n  ctx.params.id // => \"123\" from /users/123\r\n});\r\n\r\nserver.get(\"/posts/:year/:month\", (ctx) => {\r\n  ctx.params.year  // => \"2023\"\r\n  ctx.params.month // => \"09\"\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Mandatory path segments\r\n- Match until next `/` character\r\n- Must appear in order declared\r\n\r\n---\r\n\r\n### 2. Optional Parameters (`:param?`)\r\n\r\nMatch segments that may or may not exist\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/:optionalParam?\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/archive/:year?/:month?\", (ctx) => {\r\n  // Matches:\r\n  // - /archive/2023/08 => year: \"2023\", month: \"08\"\r\n  // - /archive/2023     => year: \"2023\", month: undefined\r\n  // - /archive          => year: undefined, month: undefined\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Can be omitted from request\r\n- Must be sequential at end of path\r\n- Intermediary optional params require subsequent params to also be optional\r\n\r\n---\r\n\r\n### 3. Wildcard Parameters (`*`)\r\n\r\nCapture all remaining path segments\r\n\r\n**Syntax:**\r\n\r\n```typescript\r\n\"/path/*wildcardParam\"\r\n```\r\n\r\n**Examples:**\r\n\r\n```ts\r\nserver.get(\"/files/*path\", (ctx) => {\r\n  // /files/images/2023/photo.jpg => \r\n  // ctx.params.path = \"images/2023/photo.jpg\"\r\n});\r\n\r\nserver.get(\"/docs/*category\", (ctx) => {\r\n  // /docs/api/v2/endpoints => \r\n  // ctx.params.category = \"api/v2/endpoints\"\r\n});\r\n```\r\n\r\n**Characteristics:**\r\n\r\n- Always returns string (never undefined)\r\n- Must be final segment in route\r\n- Matches all remaining path segments\r\n- Supports nested directory structures\r\n\r\n---\r\n\r\n## Matching Priority\r\n\r\nRoutes are matched with following priority order:\r\n\r\n1. Static paths (`/users/list`)\r\n2. Named parameters (`/users/:id`)\r\n3. Wildcard parameters (`/users/*`)\r\n4. Optional parameters (`/users/:id?`)\r\n\r\n**Example Hierarchy:**\r\n\r\n```ts\r\nserver.get(\"/users/list\", handleList); // Highest priority\r\nserver.get(\"/users/:id\", handleUser); \r\nserver.get(\"/users/*\", catchAll);     // Lowest priority\r\n```\r\n\r\n---\r\n\r\n## Parameter Access\r\n\r\nCaptured parameters are available in `ctx.req.params`:\r\n\r\n```ts\r\ninterface Params {\r\n  [key: string]: string | undefined;\r\n}\r\n\r\n// Example usage:\r\nserver.get(\"/shop/:category/:item?\", (ctx) => {\r\n  const { category, item } = ctx.req.params;\r\n  // category: string \r\n  // item: string | undefined\r\n});\r\n```\r\n\r\n---\r\n\r\n## Conflict Resolution\r\n\r\n### Ambiguous Routes\r\n\r\n```ts\r\n// ‚ùå Conflicting routes \r\n// ‚ùì Will be overwritten by the last handler.\r\n// Output: {name: \"Jhon\"}\r\nserver.get(\"/users/:id\", handleUser);\r\nserver.get(\"/users/:name\", handleByName);  // Will execute be reached\r\n\r\n// ‚úÖ Solution: Use distinct paths\r\nserver.get(\"/users/id/:id\", handleUser);\r\nserver.get(\"/users/name/:name\", handleByName);\r\n```\r\n\r\n### Wildcard Position\r\n\r\n```ts\r\n// ‚ùå Invalid wildcard placement\r\nserver.get(\"/*/profile\", handleProfile); \r\n\r\n// ‚úÖ Valid usage\r\nserver.get(\"/user/*/profile\", handleProfile); // Static segment before wildcard\r\n```\r\n\r\n---\r\n\r\n## Escaping Special Characters\r\n\r\nTo match literal `:` or `*`, escape with backslash:\r\n\r\n```ts\r\nserver.get(\"/colon\\\\:test\", (ctx) => {\r\n  // Matches: /colon:test\r\n});\r\n\r\nserver.get(\"/asterisk\\\\*test\", (ctx) => {\r\n  // Matches: /asterisk*test\r\n});\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Order Routes by Specificity:** Place static routes before dynamic ones\r\n2. **Validate Parameters:** Always sanitize and validate parameter values\r\n3. **Use Optional Sparingly:** Prefer explicit routes for better visibility\r\n4. **Document Complex Routes:** Add comments for routes with multiple parameters\r\n5. **Limit Wildcard Scope:** Use specific patterns before wildcards when possible\r\n\r\n```ts\r\n// Good practice example\r\nserver.get(\"/api/v1/:version/:resource\", (ctx) => {\r\n  const version = parseInt(ctx.params.version || \"\");\r\n  if (isNaN(version)) ctx.status(400).send(\"Invalid version\");\r\n});\r\n```\r\n\r\n---\r\n\r\n## Conflict Resolution Table\r\n\r\n| Path               | Priority | Notes                         |\r\n|--------------------|----------|-------------------------------|\r\n| /users/list         | High      | Specific method + param  (static match)     |\r\n| /users/:id         | High      | Specific method + param       |\r\n| /users             | Medium    | Specific method               |\r\n| /users/*           | Low       | Wildcard has lowest priority  |\r\n\r\n### **Same as post, put, ... http method**\r\n\r\n---\r\n\r\n## `all()` - Universal Method Handler\r\n\r\n**Catches ALL HTTP methods for a specific path**\r\n\r\n### Signature\r\n\r\n```typescript\r\npublic all(path: string, ...args: RouteArgs): this\r\n```\r\n\r\n### Path Parameter Support\r\n\r\n```ts\r\n|Type            | Example              | Captured Values\r\n----------------|----------------------|-------------------\r\nStandard        | /:version/api        | version: \"v2\"\r\nOptional        | /user/:id?/profile   | id: \"123\" or undefined\r\nWildcard        | /docs/*              | *: \"getting-started\"\r\nMixed           | /:lang?/api/*        | lang: \"en\", *: \"v2/endpoints\"\r\n```\r\n\r\n### Examples\r\n\r\n**Basic Usage:**\r\n\r\n```ts\r\n// Handle all methods to /healthcheck\r\nserver.all('/healthcheck', (ctx) => {\r\n  ctx.text(`Method ${ctx.method} received`);\r\n});\r\n\r\n// GET/POST/PUT/DELETE etc to /healthcheck\r\n// ‚Üí \"Method GET received\"\r\n```\r\n\r\n**With Parameters:**\r\n\r\n```ts\r\nserver.all('/*service/status', (ctx) => {\r\n  ctx.json({\r\n    servicePath: ctx.params.service, // \"auth/api\"\r\n    wildcard: ctx.params[\"wildcard\"],       // \"auth/api\"\r\n    method: ctx.method\r\n  });\r\n});\r\n\r\n// PUT /auth/api/v2/status ‚Üí \r\n// { servicePath: \"auth/api/v2\", wildcard: \"auth/api/v2\", method: \"PUT\" }\r\n```\r\n\r\n**With Middleware:**\r\n\r\n```ts\r\nserver.all(\r\n  '/secure/:zone?',\r\n  [authMiddleware, loggingMiddleware],\r\n  (ctx) => {\r\n    ctx.text(`Accessed ${ctx.params.zone || 'default'} zone`);\r\n  }\r\n);\r\n\r\n// POST /secure/admin ‚Üí Runs middlewares, handles zone=\"admin\"\r\n```\r\n\r\n---\r\n\r\n## `addRoute()` - Custom Method Registration\r\n\r\n**Handle non-standard/custom HTTP methods**\r\n\r\n### Signature\r\n\r\n```typescript\r\npublic addRoute(method: HTTPMethod, path: string, ...args: RouteArgs): this\r\n```\r\n\r\n### Supported Methods\r\n\r\n```ts\r\nStandard Methods | Custom Examples\r\n-----------------|-----------------\r\nGET, POST, PUT   | PURGE, LOCK\r\nPATCH, DELETE    | COPY, SEARCH\r\nHEAD, OPTIONS    | CUSTOM_API\r\n```\r\n\r\n### Parameter Examples\r\n\r\n**Custom Method with Parameters:**\r\n\r\n```ts\r\n// Register PURGE method\r\nserver.addRoute('PURGE', '/cache/:region/:group*', (ctx) => {\r\n  purgeCache({\r\n    region: ctx.req.params.region, // \"eu-west\"\r\n    group:  ctx.req.params.group    // \"user-profiles/v2\"\r\n  });\r\n  ctx.status(202);\r\n});\r\n\r\n// PURGE /cache/eu-west/user-profiles/v2 ‚Üí Success\r\n```\r\n\r\n**Optional Parameters:**\r\n\r\n```ts\r\nserver.addRoute('REPORT', '/stats/:type?', (ctx) => {\r\n  generateReport(ctx.params.type || 'daily');\r\n});\r\n\r\n// REPORT /stats/weekly ‚Üí type=\"weekly\"\r\n// REPORT /stats ‚Üí type=\"daily\"\r\n```\r\n\r\n**Wildcard Capture:**\r\n\r\n```ts\r\nserver.addRoute('MSEARCH', '/files/*path', (ctx) => {\r\n  searchFilesystem(ctx.req.params.path); // \"docs/archived/project.txt\"\r\n});\r\n\r\n// MSEARCH /files/docs/archived/project.txt\r\n```\r\n\r\n---\r\n\r\n## Parameter Access Pattern\r\n\r\n```ts\r\ninterface Context {\r\n  params: {\r\n    [key: string]: string | undefined;\r\n    \"*\"?: string; // Wildcard capture\r\n  }\r\n}\r\n\r\n// Access patterns\r\nctx.req.params.paramName    // Standard/optional params\r\nctx.req.params[\"*\"]         // Wildcard value\r\nctx.req.params[0]           // Not used - named params only\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n### For `all()`\r\n\r\n1. Use for:\r\n   - Maintenance mode handlers\r\n   - Global path-specific middleware\r\n   - Method-agnostic endpoints\r\n2. Avoid:\r\n   - Complex business logic\r\n   - Overlapping with specific method handlers\r\n3. Ordering:\r\n\r\n   ```ts\r\n   server.get('/api', specificHandler); // Higher priority\r\n   server.all('/*api', globalMiddleware); // Lower priority\r\n   ```\r\n\r\n### For `addRoute()`\r\n\r\n1. Use for:\r\n   - Custom HTTP methods (RFC 2518 WebDAV, etc)\r\n   - Proprietary API methods\r\n   - Experimental features\r\n2. Compatibility:\r\n\r\n   ```ts\r\n   // Check method support\r\n   if (!ctx.methodSupported('PURGE')) {\r\n     ctx.status(405).header('Allow', 'PURGE, GET');\r\n   }\r\n   ```\r\n\r\n3. Security:\r\n   - Explicitly document non-standard methods\r\n   - Handle CORS/preflight appropriately\r\n\r\n---\r\n\r\n## Conflict Resolution Table\r\n\r\n| Method        | Path               | Priority | Match Example\r\n|---------------|--------------------|----------|---------------\r\n| addRoute('PURGE') | /cache      | High     | PURGE /cache\r\n| all()         | /cache/*          | Medium   | GET/POST etc /cache/123\r\n| get()         | /cache/clear      | Highest  | GET /cache/clear\r\n\r\n**Resolution Rules:**\r\n\r\n1. Exact method matches take priority over `all()`\r\n2. Specific paths beat wildcards\r\n3. Registration order matters for same-priority routes\r\n\r\n---\r\n"
    },
    {
      "id": 12,
      "path": "api/context/basic",
      "name": "Basic",
      "folder": "API/Context",
      "content": "\r\n## **Public Properties**\r\n\r\n| Property         | Type           | Description                                                                 |\r\n|------------------|----------------|-----------------------------------------------------------------------------|\r\n| `env`            | `object`       | Environment variables and configuration                                     |\r\n| `headers`        | `HeadersParser`| HTTP headers parser instance                                                |\r\n| `pathname`       | `string`       | Request path without query parameters                                       |\r\n| `url`            | `string`       | Full request URL including protocol and query string                        |\r\n| `method`         | `HTTPMethod`   | Uppercase HTTP method (GET/POST/PUT etc)                                    |\r\n| `state`          | `State`        | Application state container for middleware data sharing                     |\r\n\r\n## **Cookie Handling**\r\n\r\n### **`cookies` Getter**\r\n\r\nManages cookies with chainable methods:\r\n\r\n```ts\r\n// Get cookie value\r\nconst session = ctx.cookies.get('sessionID');\r\n\r\n// Set new cookie\r\nctx.cookies.set('prefs', darkMode:true, { \r\n  maxAge: 3600 \r\n});\r\n\r\n// Delete cookie\r\nctx.cookies.delete('oldSession');\r\n```\r\n\r\n**Methods:**\r\n\r\n| Method | Parameters | Description |\r\n|--------|------------|-------------|\r\n| `get`  | `name: string` | Returns cookie value or `undefined` |\r\n| `all`  | - | Returns all cookies as key-value object |\r\n| `set`  | `name: string`, `value: string`, `options?: CookieOptions` | Sets cookie with options |\r\n| `delete` | `name: string`, `options?: CookieOptions` | Invalidates cookie |\r\n\r\n**CookieOptions:**\r\n\r\n```ts\r\ninterface CookieOptions {\r\n  domain?: string;\r\n  path?: string;\r\n  expires?: Date;\r\n  maxAge?: number;\r\n  secure?: boolean;\r\n  httpOnly?: boolean;\r\n  sameSite?: 'Strict' | 'Lax' | 'None';\r\n}\r\n```\r\n\r\n---\r\n\r\n## **Response Methods**\r\n\r\n### **1. `json(body, status?, headers?)`**\r\n\r\nSends JSON response:\r\n\r\n```ts\r\nctx.json({ message: \"Success\" });\r\nctx.json({ error: \"Not Found\" }, 404);\r\nctx.json(data, { 'Cache-Control': 'no-store' });\r\n```\r\n\r\n### **2. `send(body, status?, headers?)`**\r\n\r\nUniversal response handler with auto-detected content type:\r\n\r\n```ts\r\nctx.send(\"<h1>Hello</h1>\"); // text/html\r\nctx.send(Buffer.from(...), 201); // application/octet-stream\r\n```\r\n\r\n### **3. `html(data, status?, headers?)`**\r\n\r\nSends HTML content:\r\n\r\n```ts\r\nctx.html(\"<div>Page</div>\");\r\nctx.html(template, 200, { 'ETag': '123' });\r\n```\r\n\r\n### **4. `text(data, status?, headers?)`**\r\n\r\nSends plain text:\r\n\r\n```ts\r\nctx.text(\"Processing complete\");\r\nctx.text(\"Error\", 500);\r\n```\r\n\r\n### **5. `xml(data, status?, headers?)`**\r\n\r\nSends XML content:\r\n\r\n```ts\r\nctx.xml(\"<note><body>Message</body></note>\");\r\n```\r\n\r\n### **6. `redirect(url, status=302, headers?)`**\r\n\r\nPerforms HTTP redirect:\r\n\r\n```ts\r\nctx.redirect(\"/login\");\r\nctx.redirect(\"https://external.site\", 301);\r\n```\r\n\r\n### **7. `download(filePath, fileName?)`**\r\n\r\nTriggers file download:\r\n\r\n```ts\r\nawait ctx.download(\"/reports/q3.pdf\");\r\nawait ctx.download(\"/tmp/data.csv\", \"2023-data.csv\");\r\n```\r\n\r\n### **8. `status(code)`**\r\n\r\nSets HTTP status code (chainable):\r\n\r\n```ts\r\nctx.status(404).text(\"Not found\");\r\nctx.status(201).json({ id: 42 });\r\n```\r\n\r\n---\r\n\r\n## **Request Access**\r\n\r\n### **`req` Getter**\r\n\r\nProvides normalized request object:\r\n\r\n```ts\r\ninterface Request {\r\n  method: HTTPMethod;\r\n  headers: HeadersParser;\r\n  params: Record<string, any>;\r\n  // ... other request properties\r\n}\r\n\r\n// Usage\r\nconst userId = ctx.req.params.id;\r\nconst authHeader = ctx.req.headers.get(\"Authorization\");\r\n```\r\n\r\n---\r\n\r\n## **Example Workflow**\r\n\r\n```ts\r\n// Middleware example\r\napp.use(async (ctx, next) => {\r\n  // Set request ID\r\n  ctx.requestId = crypto.randomUUID();\r\n  \r\n  // Authentication check\r\n  if (!ctx.req.headers.get('Authorization')) {\r\n    return ctx.status(401).json({ error: \"Unauthorized\" });\r\n  }\r\n\r\n return await next();\r\n});\r\n\r\n// Route handler\r\napp.get('/users/:id', async (ctx) => {\r\n  const user = await db.getUser(ctx.req.params.id);\r\n  \r\n  if (!user) {\r\n    return ctx.status(404).text(\"User not found\");\r\n  }\r\n\r\n  return ctx.json({\r\n    data: user,\r\n    requestId: ctx.requestId\r\n  });\r\n});\r\n```\r\n\r\n### **Headers (`headers`)**\r\n\r\n```ts\r\n// Get authorization header\r\nconst authHeader = ctx.req.headers.get(\"authorization\");\r\n\r\n// Add custom header\r\nctx.headers.set(\"X-Response-Time\", Date.now().toString());\r\n```\r\n\r\n**Common Operations**:\r\n\r\n```ts\r\n// Check content type\r\nif (ctx.req.headers.get(\"content-type\") === \"application/json\") {\r\n  // Parse JSON body\r\n}\r\n\r\n// Set multiple response headers\r\nctx.headers\r\n  .set(\"Cache-Control\", \"max-age=3600\")\r\n  .set(\"X-Powered-By\", \"MyFramework\");\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n1. **State Management**\r\n\r\n   ```ts\r\n   // Middleware sets state\r\n   ctx.state.set('user', authenticatedUser) ;\r\n\r\n   //or\r\n   ctx.user = authenticatedUser; //context propagation\r\n\r\n   // Route handler accesses\r\n   const currentUser = ctx.state.get('user');\r\n   ```\r\n\r\n2. **Header Validation**\r\n\r\n   ```ts\r\n   const contentType = ctx.req.headers.get('Content-Type');\r\n   if (!allowedTypes.includes(contentType)) {\r\n     return ctx.status(415).text(\"Unsupported Media Type\");\r\n   }\r\n   ```\r\n\r\n3. **Parameter Sanitization**\r\n\r\n   ```ts\r\n   const userId = parseInt(ctx.req.params.id);\r\n   if (isNaN(userId)) {\r\n     return ctx.status(400).text(\"Invalid ID format\");\r\n   }\r\n   ```\r\n"
    },
    {
      "id": 13,
      "path": "api/context/state",
      "name": "State",
      "folder": "API/Context",
      "content": "# State management\r\n\r\n---\r\n\r\nPublic state container for application data. state storage for middleware and plugins\r\n\r\n## Usage Example\r\n\r\n```typescript\r\nctx.state.set(\"user\", { id: 1, name: \"Alice\" });\r\nconsole.log(ctx.state.get(\"user\")); // Output: { id: 1, name: \"Alice\" }\r\n```\r\n\r\n## Class Definition\r\n\r\n```typescript\r\nexport class State {\r\n    private state: Map<string, any>;\r\n\r\n    constructor() {\r\n        this.state = new Map();\r\n    }\r\n```\r\n\r\n### Methods\r\n\r\n#### `set(key: string, value: any): void`\r\n\r\nStores a value associated with a specific key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key for the value.\r\n- `value` (any): The value to be stored.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.set(\"user\", { id: 1, name: \"Alice\" });\r\n```\r\n\r\n---\r\n\r\n#### `get(key: string): any | undefined`\r\n\r\nRetrieves a stored value by key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key of the value to retrieve.\r\n\r\n**Returns:**\r\n\r\n- The stored value or `undefined` if not found.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconst user = ctx.state.get(\"user\");\r\nconsole.log(user); // { id: 1, name: \"Alice\" }\r\n```\r\n\r\n---\r\n\r\n#### `delete(key: string): boolean`\r\n\r\nDeletes a stored value by key.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key to remove.\r\n\r\n**Returns:**\r\n\r\n- `true` if the key was deleted, `false` otherwise.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.delete(\"user\");\r\nconsole.log(ctx.state.get(\"user\")); // undefined\r\n```\r\n\r\n---\r\n\r\n#### `has(key: string): boolean`\r\n\r\nChecks if a key exists in storage.\r\n\r\n**Parameters:**\r\n\r\n- `key` (string): The key to check.\r\n\r\n**Returns:**\r\n\r\n- `true` if the key exists, `false` otherwise.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.has(\"user\")); // true or false\r\n```\r\n\r\n---\r\n\r\n#### `keys(): string[]`\r\n\r\nReturns an array of all stored keys.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.keys()); // [\"user\"]\r\n```\r\n\r\n---\r\n\r\n#### `values(): any[]`\r\n\r\nReturns an array of all stored values.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.values()); // [{ id: 1, name: \"Alice\" }]\r\n```\r\n\r\n---\r\n\r\n#### `entries(): [string, any][]`\r\n\r\nReturns an array of key-value pairs.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconsole.log(ctx.state.entries()); // [[\"user\", { id: 1, name: \"Alice\" }]]\r\n```\r\n\r\n---\r\n\r\n#### `clear(): void`\r\n\r\nRemoves all stored entries.\r\n\r\n**Example:**\r\n\r\n```typescript\r\nctx.state.clear();\r\nconsole.log(ctx.state.keys()); // []\r\n```\r\n"
    },
    {
      "id": 14,
      "path": "api/context/context-propagation",
      "name": "Context Propagation",
      "folder": "API/Context",
      "content": "\r\n---\r\n\r\n# Context Propagation\r\n\r\n## Overview\r\n\r\nContext propagation enables type-safe sharing of request-scoped data across middleware and handlers. It ensures strict type validation while allowing hierarchical context extension.\r\n\r\n---\r\n\r\n## Core Concepts\r\n\r\n### 1. Type-Safe Context Definition\r\n\r\nDefine your context shape using TypeScript interfaces:\r\n\r\n```typescript\r\ninterface CustomContext {\r\n  // Optional authentication data\r\n  user?: User\r\n  \r\n  // Required request identifier\r\n  requestId: string\r\n  \r\n  // Add other request-specific properties\r\n  // logger?: Logger\r\n  // db?: DatabaseConnection\r\n}\r\n```\r\n\r\n### 2. Router Initialization\r\n\r\nCreate a router with your context type:\r\n\r\n```typescript\r\nimport {Router} from \"tejx\";\r\nconst app = new Router<CustomContext>()\r\n```\r\n\r\n### 3. Middleware Implementation\r\n\r\nAdd context-enriching middleware with full type safety:\r\n\r\n```typescript\r\n// Authentication middleware\r\napp.use(async (ctx, next) => {\r\n  ctx.user = await authenticateRequest(ctx.request)\r\n  return next()\r\n})\r\n\r\n// Request ID middleware\r\napp.use((ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID()\r\n  return next()\r\n})\r\n```\r\n\r\n### 4. Handler Access\r\n\r\nAccess validated context properties in endpoints:\r\n\r\n```typescript\r\napp.get('/profile', (ctx) => {\r\n  // TypeScript automatically infers context shape\r\n  return Response.json({\r\n    id: ctx.requestId,\r\n    user: ctx.user.email // Safe access to user data\r\n  })\r\n})\r\n```\r\n\r\n---\r\n\r\n## Advanced Features\r\n\r\n### Context Composition\r\n\r\nMerge multiple context types for modular development:\r\n\r\n```typescript\r\ninterface AuthContext {\r\n  user: User\r\n  session: Session\r\n}\r\n\r\ninterface LoggingContext {\r\n  logger: Logger\r\n  requestStart: number\r\n}\r\n\r\ntype AppContext = AuthContext & LoggingContext\r\n\r\nconst app = new Router<AppContext>()\r\n```\r\n\r\n### Validation Middleware\r\n\r\nEnsure context integrity with validation:\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  if (!ctx.requestId) {\r\n    throw new Error('Missing request ID')\r\n  }\r\n  return next()\r\n})\r\n```\r\n\r\n---\r\n\r\n## Error Handling\r\n\r\n### Type Safety Guards\r\n\r\nThe compiler prevents common mistakes:\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  // Type Error: Property 'newProp' does not exist\r\n  ctx.newProp = 'value' \r\n  // Type Error: requestId must be string\r\n  ctx.requestId = 123\r\n  return next();\r\n})\r\n```\r\n\r\n### Optional Properties\r\n\r\nSafely handle partial context:\r\n\r\n```typescript\r\napp.get('/public', (ctx) => {\r\n  // user is optional - check existence\r\n  return ctx.user \r\n    ? Response.json(ctx.user)\r\n    : Response.json({ error: 'Unauthorized' }, 401)\r\n})\r\n```\r\n\r\n---\r\n\r\n## Best Practices\r\n\r\n1. **Initialization Order**\r\n   - Set critical context properties early in the middleware chain\r\n   - Place validation middleware after property initialization\r\n\r\n2. **Immutability**\r\n\r\n   ```typescript\r\n   // Avoid:\r\n   ctx.user = {...ctx.user, ...newData}\r\n   \r\n   // Prefer:\r\n   const updatedUser = {...ctx.user, ...newData}\r\n   ```\r\n\r\n3. **Testing Patterns**\r\n\r\n   ```typescript\r\n   // Mock context for testing\r\n   const testCtx: CustomContext = {\r\n     requestId: 'test-123',\r\n     user: mockUser\r\n   }\r\n   ```\r\n\r\n---\r\n\r\n### Context Lifecycle\r\n\r\n1. Initialization\r\n2. Middleware Processing\r\n3. Handler Execution\r\n4. Cleanup Hooks\r\n\r\n---\r\n"
    },
    {
      "id": 15,
      "path": "api/context/cookies",
      "name": "Cookies",
      "folder": "API/Context",
      "content": "\r\n# Cookies\r\n\r\n---\r\n\r\n## **Setting and Retrieving Cookies in `PUT /data` Route**\r\n\r\n```ts\r\napp.put('/data', async (ctx) => {\r\n    // Set a cookie\r\n    ctx.cookies.set('sessionToken', 'abc123', { HttpOnly: true, Secure: true });\r\n\r\n    // Get a cookie\r\n    const session = ctx.cookies.get('sessionToken');\r\n\r\n    // Delete a cookie\r\n    // ctx.cookies.delete('sessionToken');\r\n\r\n    return ctx.json({ \r\n        success: true, \r\n        message: \"PUT request received\", \r\n        sessionToken: session \r\n    });\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Functions and Their Purpose**\r\n\r\n| **Function**  | **Description** |\r\n|--------------|----------------|\r\n| `get(name)` | Retrieves the value of a specific cookie. |\r\n| `all()` | Returns an object containing all cookies. |\r\n| `set(name, value, options?)` | Sets a new cookie with optional attributes. |\r\n| `delete(name, options?)` | Deletes a cookie by setting its expiration in the past. |\r\n\r\n---\r\n\r\n## **Example Usage in a Client Request**\r\n\r\n### **Sending a Cookie with Fetch API**\r\n\r\n```js\r\nfetch('/data', {\r\n    method: 'PUT',\r\n    credentials: 'include', // its mandatory\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ action: \"test\" })\r\n}).then(res => res.json())\r\n  .then(data => console.log(data));\r\n```\r\n\r\n## **Security Considerations**\r\n\r\nWhen handling cookies, consider the following:\r\n\r\n1. **Use `HttpOnly` for Security:** Prevents JavaScript access to cookies, reducing XSS risks.\r\n2. **Use `Secure` for HTTPS:** Ensures cookies are only transmitted over HTTPS.\r\n3. **Use `SameSite` to Prevent CSRF:**\r\n   - `SameSite=Strict`: Blocks all cross-site requests.\r\n   - `SameSite=Lax`: Allows safe cross-site navigation.\r\n   - `SameSite=None; Secure`: Required for cross-origin cookies (e.g., third-party cookies).\r\n4. **Set Expiry for Session Management:** Use `expires` to define cookie lifespan.\r\n5. **Enable Path Restriction:** Restrict cookies to specific paths using `Path=/some-path`.\r\n\r\n---\r\n\r\n### **Notes**\r\n\r\n- Cookies can have attributes like `HttpOnly`, `Secure`, `SameSite`, and `Expires`.\r\n- Ensure that **cookies are sent with credentials (`credentials: 'include'`)** if needed.\r\n"
    },
    {
      "id": 16,
      "path": "api/request/request",
      "name": "Request",
      "folder": "API/Request",
      "content": "\r\n---\r\n\r\n## **Request Handling API**\r\n\r\n## **1. Method**\r\n\r\n**Retrieves the HTTP request method.**\r\n\r\n```ts\r\n// Example: GET, POST, PUT, DELETE, etc.\r\nconst method = ctx.req.method; \r\n```\r\n\r\n**Properties**:\r\n\r\n- Read-only property\r\n- Always returns uppercase method name\r\n\r\n**Example**:\r\n\r\n```ts\r\nserver.post(\"/users\", (ctx) => {\r\n  if (ctx.req.method === \"POST\") {\r\n    // Handle user creation\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **2. URL Reference (`urlRef`)**\r\n\r\n**Deconstructed URL components.**\r\n\r\n```ts\r\ninterface UrlRef {\r\n  hash?: string;         // #section\r\n  protocol?: string;     // \"http:\" or \"https:\"\r\n  origin?: string;       // \"https://example.com:8080\"\r\n  username?: string;     // Auth username\r\n  password?: string;     // Auth password\r\n  hostname?: string;     // \"example.com\"\r\n  port?: string;         // \"8080\"\r\n  href?: string;         // Full URL string\r\n  query: Record<string, string>; // Parsed query parameters\r\n  pathname: string;      // \"/api/v2/users\"\r\n}\r\n```\r\n\r\n**Usage**:\r\n\r\n```ts\r\nconst url = ctx.req.urlRef;\r\n\r\n// Example for \"https://api.com:8080/users?id=123#details\"\r\nconsole.log(url.port);     // \"8080\"\r\nconsole.log(url.hostname); // \"api.com\"\r\nconsole.log(url.query);    // { id: \"123\" }\r\nconsole.log(url.hash);     // \"details\"\r\n```\r\n\r\n**Note**: Missing components return `undefined`.\r\n\r\n---\r\n\r\n## **3. Query Parameters (`query`)**\r\n\r\n**Parsed URL query string parameters.**\r\n\r\n```ts\r\n// URL: /search?q=term&page=2&filter=new\r\nconst query = ctx.req.query; \r\n/* Returns:\r\n{\r\n  q: \"term\",\r\n  page: \"2\",\r\n  filter: \"new\"\r\n} */\r\n```\r\n\r\n**Behavior**:\r\n\r\n- Decodes URL-encoded values\r\n- Last value wins for duplicate keys\r\n- Returns empty object if no query\r\n\r\n**Example**:\r\n\r\n```ts\r\nserver.get(\"/products\", (ctx) => {\r\n  const page = ctx.req.query.page || \"1\";\r\n  // Pagination logic\r\n});\r\n```\r\n\r\n---\r\n\r\n## **4. Dynamic Parameters (`params`)**\r\n\r\n**Captured route parameters from path patterns.**\r\n\r\n**Route Patterns**:\r\n\r\n```ts\r\n// Route definition\r\nserver.get(\"/users/:id/posts/:slug*\", handler);\r\n\r\n// Request: /users/42/posts/announcements/2023\r\nctx.req.params = {\r\n  id: \"42\",\r\n  slug: \"announcements/2023\" // Wildcard capture\r\n};\r\n```\r\n\r\n**Supported Patterns**:\r\n\r\n| Pattern       | Example Route        | Request Path       | Result            |\r\n|---------------|----------------------|--------------------|-------------------|\r\n| `:param`      | /users/:id           | /users/42          | `{ id: \"42\" }`    |\r\n| `:param?`     | /archive/:year?      | /archive           | `{ year: null }`  |\r\n| `*`           | /files/*path         | /files/docs/readme | `{ path: \"docs/readme\" }` |\r\n\r\n**Best Practices**:\r\n\r\n```ts\r\n// Validate numeric ID\r\nserver.get(\"/products/:id\", (ctx) => {\r\n  const id = parseInt(ctx.req.params.id);\r\n  if (isNaN(id)) return ctx.status(400);\r\n});\r\n```\r\n\r\n---\r\n\r\n## **5. Headers (`headers`)**\r\n\r\n```ts\r\n// Get authorization header\r\nconst authHeader = ctx.req.headers.get(\"authorization\");\r\n\r\n// Add custom header\r\nctx.headers.set(\"X-Response-Time\", Date.now().toString());\r\n```\r\n\r\n**Common Operations**:\r\n\r\n```ts\r\n// Check content type\r\nif (ctx.req.headers.get(\"content-type\") === \"application/json\") {\r\n  // Parse JSON body\r\n}\r\n\r\n// Set multiple response headers\r\nctx.headers\r\n  .set(\"Cache-Control\", \"max-age=3600\")\r\n  .set(\"X-Powered-By\", \"MyFramework\");\r\n```\r\n\r\n---\r\n\r\n## **Request Flow Diagram**\r\n\r\n```bash\r\nsequenceDiagram\r\n  Client->>Server: GET /users/42?details=true\r\n  Server->>Handler: \r\n  Handler->>Parse URL: Extract { id: \"42\" }\r\n  Handler->>Check Headers: Verify Content-Type\r\n  Handler->>Process Query: { details: \"true\" }\r\n  Handler->>Response: Send data\r\n  Server->>Client: 200 OK with headers\r\n```\r\n\r\n---\r\n\r\n## **6. Body Parser**\r\n\r\nHandle request bodies with built-in parsers for various content types.\r\n\r\n### **Supported Formats**\r\n\r\n| Method | Content-Type | Features |\r\n|--------|--------------|----------|\r\n| `text()` | `text/plain` | Raw text parsing |\r\n| `json()` | `application/json` | JSON validation |\r\n| `formData()` | `multipart/form-data`<br>`application/x-www-form-urlencoded` | File uploads + form fields |\r\n\r\n---\r\n\r\n### **1. Text Parsing**\r\n\r\n**Use Case:** Plaintext, XML, CSV, or custom formats  \r\n**Max Size:** Configurable via `maxBodySize`\r\n\r\n```ts\r\n// Basic text parsing\r\nconst rawText = await ctx.req.text();\r\n\r\n// With error handling\r\ntry {\r\n  const config = await ctx.req.text();\r\n  // Process text content\r\n} catch (error) {\r\n  ctx.status(400).text(\"Invalid text payload\");\r\n}\r\n```\r\n\r\n---\r\n\r\n### **2. JSON Parsing**\r\n\r\n**Automatic Validation:**  \r\n\r\n```ts\r\ntry {\r\n  const data = await ctx.req.json();\r\n} \r\ncatch (error) {\r\n  ctx.status(422).json({ error: \"Validation failed\" });\r\n}\r\n```\r\n\r\n---\r\n\r\n### **3. Form Data Handling**\r\n\r\n#### **URL-Encoded Forms**\r\n\r\n```ts\r\nconst form = await ctx.req.formData();\r\nconsole.log(form.username); // \"john_doe\"\r\n```\r\n\r\n#### **Multipart File Uploads**\r\n\r\n```ts\r\n// File upload configuration\r\nconst config = {\r\n  maxFileSize: 50 * 1024 * 1024, // 50MB\r\n  allowedTypes: [\"image/jpeg\", \"application/pdf\"]\r\n};\r\n\r\nconst form = await ctx.req.formData(config);\r\nconst file = form.avatar as File;\r\n\r\n// Save to filesystem\r\nconst buffer = await file.arrayBuffer();\r\nwriteFileSync(`./uploads/${file.name}`, Buffer.from(buffer));\r\n```\r\n\r\n---\r\n\r\n### **4. File Upload Example**\r\n\r\n**Route Handler:**\r\n\r\n```ts\r\nserver.post(\"/upload\", async (ctx) => {\r\n  try {\r\n    const form = await ctx.req.formData();\r\n\r\n    const files = form.attachments;\r\n    let results = [];\r\n    if(Array.isArray(files)){\r\n      for (const file of files) {\r\n        const sanitizedName = sanitizeFilename(file.name);\r\n        const path = `./uploads/${sanitizedName}`;\r\n        \r\n        await writeFile(path, await file.arrayBuffer());\r\n        results.push({ name: sanitizedName, status: \"success\" });\r\n      }\r\n    }\r\n\r\n    return ctx.json({ results });\r\n  } catch (error) {\r\n    return ctx.status(500).json({ error: \"Upload failed\" });\r\n  }\r\n});\r\n```\r\n\r\n**Client-Side Upload:**\r\n\r\n```js\r\nconst form = new FormData();\r\nform.append(\"avatar\", fileInput.files[0]);\r\n\r\nfetch(\"/upload\", {\r\n  method: \"POST\",\r\n  body: form\r\n});\r\n```\r\n\r\n---\r\n"
    },
    {
      "id": 17,
      "path": "api/request/body-parser",
      "name": "Body Parser",
      "folder": "API/Request",
      "content": "# Body Parser\r\n\r\n---\r\n\r\n- **Text parsing**  \r\n- **JSON parsing**  \r\n- **URL-encoded form parsing**  \r\n- **Multipart form-data parsing** (including file handling)  \r\n\r\n---\r\n\r\n## **Body Parser**\r\n\r\n### **1. Parsing Text Requests**\r\n\r\nThe `text()` method reads and returns the request body as a string.\r\n\r\n```ts\r\n    const body = await ctx.req.text();\r\n```\r\n\r\n---\r\n\r\n### **2. Parsing JSON Requests**\r\n\r\nThe `json()` method ensures that the content type is `application/json` before parsing the request body.\r\n\r\n```ts\r\n    const body = await ctx.req.json();\r\n```\r\n\r\n---\r\n\r\n### **3. Parsing Form Data (URL-Encoded & Multipart)**\r\n\r\nThe `formData()` method dynamically detects and parses form submissions, handling:\r\n\r\n- **JSON (`application/json`)**\r\n- **URL-encoded (`application/x-www-form-urlencoded`)**\r\n- **Multipart form-data (`multipart/form-data`)**, including file uploads.\r\n\r\n```ts\r\n    const body = await ctx.req.formData();\r\n\r\n```\r\n\r\n---\r\n\r\n## **Example: File Upload Route**\r\n\r\nThis route:\r\n\r\n- Accepts file uploads via `multipart/form-data`\r\n- Saves the file to the **uploads** directory\r\n- Responds with the file path\r\n\r\n```ts\r\nimport { join } from 'path';\r\nimport { writeFile } from 'fs/promises';\r\n\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file uploaded\" }, 400);\r\n    }\r\n\r\n    try {\r\n        const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n        const filePath = join(process.cwd(), 'uploads', file.name); // Define file path\r\n\r\n        await writeFile(filePath, Buffer.from(buffer)); // Save file\r\n\r\n        return ctx.json({ \r\n            message: \"File uploaded successfully\", \r\n            path: filePath \r\n        });\r\n    } catch (error: any) {\r\n        return ctx.json({ \r\n            error: \"File save failed\", \r\n            details: error.message \r\n        }, 500);\r\n    }\r\n});\r\n```\r\n\r\n## **Send buffer**\r\n\r\n```ts\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file find\" }, 400);\r\n    }\r\n    const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n    return ctx.send(buffer, {\r\n        'Content-Type': file.type // its required\r\n    })\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Usage Example: Uploading a File via `fetch`**\r\n\r\nHere‚Äôs how a client can send a file to this endpoint using JavaScript:\r\n\r\n```js\r\nconst fileInput = document.querySelector('input[type=\"file\"]');\r\nconst formData = new FormData();\r\nformData.append(\"file\", fileInput.files[0]);\r\n\r\nfetch('/data', {\r\n    method: 'POST',\r\n    body: formData\r\n})\r\n.then(response => response.json())\r\n.then(data => console.log(data))\r\n.catch(error => console.error('Error:', error));\r\n```\r\n\r\n---\r\n\r\n## **Summary of Features**\r\n\r\n| Feature | Description |\r\n|---------|------------|\r\n| `text()` | Reads request body as a string. |\r\n| `json()` | Parses `application/json` data. |\r\n| `formData()` | Parses `application/x-www-form-urlencoded` and `multipart/form-data`. |\r\n\r\n---\r\n\r\n```ts\r\n// Generic Form Handling\r\nconst form = await ctx.req.formData();\r\n\r\n// Accessing Values\r\nconst username = form.username;\r\nconst avatar = form.avatar as File;\r\n```\r\n\r\n---\r\n\r\n## **File Upload Deep Dive**\r\n\r\n### **Configuration Options**\r\n\r\n```ts\r\ninterface UploadConfig {\r\n  maxFileSize?: number;      // Default: 10MB\r\n  allowedTypes?: string[];   // ['image/*', 'application/pdf']\r\n  maxFiles?: number;         // Default: undefine\r\n}\r\n```\r\n\r\n### **cURL Upload**\r\n\r\n```bash\r\ncurl -X POST \\\r\n  -F \"document=@report.pdf\" \\\r\n  -F \"metadata={\\\"category\\\":\\\"finance\\\"};type=application/json\" \\\r\n  http://api.example.com/upload\r\n```\r\n\r\n### **2. Browser Fetch with Progress**\r\n\r\n```js\r\nconst uploadFile = async (file) => {\r\n  const form = new FormData();\r\n  form.append('file', file);\r\n  \r\n  const response = await fetch('/upload', {\r\n    method: 'POST',\r\n    body: form,\r\n    headers: {\r\n      'X-Upload-Token': 'auth_token_here'\r\n    }\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Upload failed: ${await response.text()}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Performance Tips**\r\n\r\n1. **Stream Processing:** For large files, use streaming instead of full buffering\r\n\r\n   ```ts\r\n   const stream = file.stream();\r\n   const transformer = new TransformStream();\r\n   // Add processing logic\r\n   ```\r\n\r\n2. **Memory Management:** Configure body parser limits based on expected payloads\r\n\r\n3. **Async Processing:** Handle file operations in background workers for large uploads\r\n\r\n4. **CORS Configuration:** Proper headers for cross-origin uploads\r\n\r\n   ```ts\r\n   ctx.headers.set('Access-Control-Allow-Origin', 'trusted-domain.com');\r\n   ```\r\n\r\n### **üõ†Ô∏è Example Usage**\r\n\r\n```javascript\r\nconst allowedTypes = [\"image/png\", \"image/jpeg\", \"image/webp\", \"video/mp4\"];\r\n\r\nconst formData = await ctx.req.formData({\r\n    sanitized: true,  // Ensure filename is sanitized\r\n    allowedTypes,  // Define accepted file types as an array\r\n    maxSize: 5000,  // Max file size in KB (5MB)\r\n});\r\n```\r\n\r\n---\r\n\r\n## **üîπ API Reference: `ctx.req.formData(options)`**\r\n\r\n### **üìù Parameters**\r\n\r\n| Option           | Type       | Default  | Description |\r\n|-----------------|-----------|----------|-------------|\r\n| `sanitized` | `boolean` | `false` | If `true`, filenames will be **sanitized** (remove special characters). |\r\n| `allowedTypes`  | `string[]` | `[]` | An **array of MIME types** (e.g., `[\"image/png\", \"image/jpeg\"]`). |\r\n| `maxSize`       | `number`   | `Infinity` | Max file size allowed (in KB). |\r\n\r\n---\r\n\r\n### **üîπ Return Value**\r\n\r\nThe function returns a **parsed form data object**:\r\n\r\n```javascript\r\n{\r\n    fields: { key1: \"value1\" }, // Form fields (non-file)\r\n    files: [\r\n        {\r\n            name: \"example.jpg\", \r\n            sanitizedName: \"example.jpg\",\r\n            type: \"image/jpeg\",\r\n            size: 1024, // File size in KB\r\n            path: \"/tmp/uploads/example.jpg\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n---\r\n\r\n## **üöÄ Examples**\r\n\r\n### **‚úÖ Allow Only PNG & JPEG Images**\r\n\r\n```javascript\r\nconst formData = await ctx.req.formData({\r\n    allowedTypes: [\"image/png\", \"image/jpeg\"]\r\n});\r\n```\r\n\r\n### **‚úÖ Allow Images & Videos**\r\n\r\n```javascript\r\nconst formData = await ctx.req.formData({\r\n    allowedTypes: [\"image/png\", \"image/jpeg\", \"image/webp\", \"video/mp4\"],\r\n    maxSize: 8000 // Max 8MB\r\n});\r\n```\r\n\r\n---\r\n\r\n## **‚ö†Ô∏è Error Handling**\r\n\r\n### **‚ùå If File Type is Not Allowed**\r\n\r\nIf a file type isn't in `allowedTypes`, it is **ignored** without throwing an error.\r\n\r\n### **‚ùå If File Exceeds `maxSize`**\r\n\r\n- The system **prevents** the upload of large files.\r\n\r\n### **‚ùå If No Files are Uploaded**\r\n\r\n- Returns an empty `files` array.\r\n\r\n---\r\n\r\n## **üõ†Ô∏è Best Practices**\r\n\r\n‚úÖ Use an **array for easier customization** (`allowedTypes`).  \r\n‚úÖ Always **sanitize filenames** if saving on a server.  \r\n‚úÖ Set a **reasonable file size limit** (`maxSize`).  \r\n‚úÖ Implement **logging** for skipped files.  \r\n\r\n---\r\n"
    },
    {
      "id": 18,
      "path": "api/response/tejresponse",
      "name": "TejResponse",
      "folder": "API/Response",
      "content": "# **TejResponse**\r\n\r\n## Overview\r\n\r\nThe `TejResponse` class provides a set of static methods to simplify HTTP response handling in a web application. It supports various response types including JSON, HTML, text, XML, file downloads, and redirections.\r\n\r\n---\r\n\r\n## Import\r\n\r\n```ts\r\nimport {TejResponse} from \"jetx\";\r\n```\r\n\r\n## Or Custom Response\r\n\r\n```ts\r\napp.get('/data', async (ctx) => {\r\n    return new Response('Hello World', { status: 200 });\r\n});`\r\n```\r\n\r\n## Methods\r\n\r\n### `json`\r\n\r\n#### Description\r\n\r\nSends a JSON response.\r\n\r\n#### Parameters\r\n\r\n- `body: any` - The response data.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with JSON data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.json({ message: \"Success\" }, 200);\r\n// or using context\r\nreturn ctx.json({ message: \"Success\" }, 200);\r\n```\r\n\r\n---\r\n\r\n### `html`\r\n\r\n#### Description\r\n\r\nSends an HTML response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The HTML content as a string.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with HTML data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.html(\"<h1>Welcome</h1>\", 200);\r\n// or using context\r\nreturn ctx.html(\"<h1>Welcome</h1>\", 200);\r\n```\r\n\r\n---\r\n\r\n### `text`\r\n\r\n#### Description\r\n\r\nSends a plain text response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The text content.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with plain text data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.text(\"Hello, World!\", 200);\r\n// or using context\r\nreturn ctx.text(\"Hello, World!\", 200);\r\n```\r\n\r\n---\r\n\r\n### `xml`\r\n\r\n#### Description\r\n\r\nSends an XML response.\r\n\r\n#### Parameters\r\n\r\n- `data: string` - The XML content.\r\n- `status?: number` (Optional) - HTTP status code (default: 200).\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with XML data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.xml(\"<note><to>User</to><message>Hello</message></note>\", 200);\r\n// or using context\r\nreturn ctx.xml(\"<note><to>User</to><message>Hello</message></note>\", 200);\r\n```\r\n\r\n---\r\n\r\n### `send`\r\n\r\n#### Description\r\n\r\nSends a response with any content type, automatically determining the content type if not provided.\r\n\r\n#### Parameters\r\n\r\n- `body: any` - The response body.\r\n- `status?: number` (Optional) - HTTP status code.\r\n- `headers?: ResponseHeaders` (Optional) - Additional response headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with the provided data.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.send(\"Custom Content\", 200, { \"X-Custom-Header\": \"value\" });\r\n// or using context\r\nreturn ctx.send(\"Custom Content\", 200, { \"X-Custom-Header\": \"value\" });\r\n```\r\n\r\n---\r\n\r\n### `redirect`\r\n\r\n#### Description\r\n\r\nRedirects to a given URL.\r\n\r\n#### Parameters\r\n\r\n- `url: string` - The target URL.\r\n- `status?: number` (Optional) - HTTP status code (default: 302).\r\n- `headers?: ResponseHeaders` (Optional) - Additional headers.\r\n\r\n#### Returns\r\n\r\n`Response` object with redirect headers.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn TejResponse.redirect(\"https://example.com\");\r\n// or using context\r\nreturn ctx.redirect(\"https://example.com\");\r\n```\r\n\r\n---\r\n\r\n### `download`\r\n\r\n#### Description\r\n\r\nHandles file downloads.\r\n\r\n#### Parameters\r\n\r\n- `filePath: string` - The path to the file.\r\n- `fileName: string` - The name of the downloaded file.\r\n\r\n#### Returns\r\n\r\nA `Promise<Response>` object for file download.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn await TejResponse.download(\"/path/to/file.pdf\", \"document.pdf\");\r\n// or using context\r\nreturn ctx.download(\"/path/to/file.pdf\", \"document.pdf\");\r\n```\r\n\r\n---\r\n\r\n### `sendFile`\r\n\r\n#### Description\r\n\r\nServes a static file to the client.\r\n\r\n#### Parameters\r\n\r\n- `filePath: string` - Absolute or relative path to the file.\r\n- `fileName?: string` (Optional) - The name of the sent file.\r\n\r\n#### Returns\r\n\r\nA `Promise<Response>` object with the file stream.\r\n\r\n#### Usage\r\n\r\n```ts\r\nreturn await TejResponse.sendFile(\"/path/to/image.jpg\", \"picture.jpg\");\r\n// or using context\r\nreturn ctx.sendFile(\"/path/to/image.jpg\", \"picture.jpg\");\r\n```\r\n\r\n---\r\n\r\n## Notes\r\n\r\n- The `TejResponse` class is designed to work in different runtime environments such as Node.js, Bun, and Deno.\r\n- Methods automatically handle appropriate content-type headers.\r\n- `download` and `sendFile` methods check for file existence and serve accordingly.\r\n\r\n---\r\n\r\n## Example Usage in an Express-like Framework\r\n\r\n```ts\r\napp.get(\"/json\", (req, res) => {\r\n    return TejResponse.json({ message: \"Hello World\" });\r\n    // or using context\r\n    return ctx.json({ message: \"Hello World\" });\r\n});\r\n\r\napp.get(\"/redirect\", (req, res) => {\r\n    return TejResponse.redirect(\"https://example.com\");\r\n    // or using context\r\n    return ctx.redirect(\"https://example.com\");\r\n});f\r\n```\r\n"
    },
    {
      "id": 19,
      "path": "headers-api",
      "name": "Headers API",
      "folder": ".",
      "content": "\r\n---\r\n\r\n# Headers API\r\n\r\n**Request and response headers are different.**\r\n\r\n---\r\n\r\n## **Core Methods**\r\n\r\n### **1. `add(headers: [string, string][] | Record<string, string>)`**  \r\n\r\n**Purpose:** Add multiple headers without overwriting existing ones  \r\n**Behavior:**  \r\n\r\n- Appends new headers while preserving existing ones  \r\n- Merges values for duplicate headers  \r\n\r\n```ts\r\n// Array of tuples example\r\nheaders.add([\r\n  [\"Content-Type\", \"application/json\"],\r\n  [\"Cache-Control\", \"max-age=3600\"]\r\n]);\r\n\r\n// Object example\r\nheaders.add({\r\n  \"X-Custom-Header\": \"Value1\",\r\n  \"Accept-Encoding\": \"gzip\"\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. `set(key: string, value: string | string[])`**  \r\n\r\n**Purpose:** Create or overwrite a header  \r\n**Behavior:**  \r\n\r\n- Replaces all existing values for this header  \r\n- Accepts single value or array of values  \r\n\r\n```ts\r\n// Single value\r\nheaders.set(\"Authorization\", \"Bearer abc123\");\r\n\r\n// Multiple values\r\nheaders.set(\"Accept-Language\", [\"en-US\", \"fr-FR\"]);\r\n```\r\n\r\n---\r\n\r\n### **3. `get(key: string): string | undefined`**  \r\n\r\n**Purpose:** Retrieve first value of a header  \r\n\r\n```ts\r\nconst contentType = ctx.req.headers.get(\"content-type\"); \r\n// \"application/json\" (case-insensitive)\r\n```\r\n\r\n---\r\n\r\n### **4. `getAll(key: string): string[]`**  \r\n\r\n**Purpose:** Retrieve all values of a header  \r\n\r\n```ts\r\nconst languages = ctx.req.headers.getAll(\"accept-language\");\r\n// [\"en-US\", \"fr-FR\"]\r\n```\r\n\r\n---\r\n\r\n### **5. `has(key: string): boolean`**  \r\n\r\n**Purpose:** Check header existence  \r\n\r\n```ts\r\nif (ctx.req.headers.has(\"x-auth-token\")) {\r\n  // Handle authentication\r\n}\r\n```\r\n\r\n---\r\n\r\n### **6. `delete(key: string): boolean`**  \r\n\r\n**Purpose:** Remove a header  \r\n**Returns:** `true` if header existed, `false` otherwise  \r\n\r\n```ts\r\nconst existed = ctx.req.headers.delete(\"expires\");\r\n```\r\n\r\n---\r\n\r\n### **7. `append(key: string, value: string)`**  \r\n\r\n**Purpose:** Add value to existing header or create new  \r\n\r\n```ts\r\nheaders.append(\"Vary\", \"User-Agent\");\r\nheaders.append(\"Vary\", \"Accept-Encoding\");\r\n// Vary: User-Agent, Accept-Encoding\r\n```\r\n\r\n---\r\n\r\n## **Iteration Methods**\r\n\r\n### **8. `entries(): Iterable<[string, string[]]>`**  \r\n\r\n**Purpose:** Get [key, values] iterator  \r\n\r\n```ts\r\nfor (const [header, values] of headers.entries()) {\r\n  console.log(`${header}: ${values.join(', ')}`);\r\n}\r\n```\r\n\r\n### **9. `keys(): Iterable<string>`**  \r\n\r\n**Purpose:** Get header names iterator  \r\n\r\n```ts\r\nfor (const headerName of headers.keys()) {\r\n  console.log(\"Header present:\", headerName);\r\n}\r\n```\r\n\r\n### **10. `values(): Iterable<string[]>`**  \r\n\r\n**Purpose:** Get header values iterator  \r\n\r\n```ts\r\nfor (const values of headers.values()) {\r\n  console.log(\"Values:\", values);\r\n}\r\n```\r\n\r\n---\r\n\r\n## **Utility Methods**\r\n\r\n### **11. `forEach(callback: (values: string[], key: string) => void)`**  \r\n\r\n**Purpose:** Iterate through headers  \r\n\r\n```ts\r\nheaders.forEach((values, key) => {\r\n  console.log(`Header ${key} has ${values.length} values`);\r\n});\r\n```\r\n\r\n### **12. `toObject(): Record<string, string | string[]>`**  \r\n\r\n**Purpose:** Convert to plain JS object  \r\n\r\n```ts\r\nconst headerObj = headers.toObject();\r\n/* Returns:\r\n{\r\n  \"content-type\": \"application/json\",\r\n  \"accept-language\": [\"en-US\", \"fr-FR\"]\r\n}\r\n*/\r\n```\r\n\r\n---\r\n\r\n## **Usage Patterns**\r\n\r\n### **Request Header Modification**\r\n\r\n```ts\r\n// Middleware to add security headers\r\nserver.use(async (ctx) => {\r\n  ctx.headers\r\n    .set(\"X-Content-Type-Options\", \"nosniff\")\r\n    .set(\"Content-Security-Policy\", \"default-src 'self'\")\r\n    .delete(\"X-Powered-By\");\r\n  \r\n  await ctx.next();\r\n});\r\n```\r\n\r\n### **Response Header Handling**\r\n\r\n```ts\r\n// API versioning example\r\nserver.get(\"/data\", (ctx) => {\r\n  ctx.headers\r\n    .set(\"X-API-Version\", \"2.1\")\r\n    .append(\"Vary\", \"Accept-Encoding\");\r\n  \r\n  return ctx.json({ data: \"...\" });\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Header Operations Cheat Sheet**\r\n\r\n| Method | Description | Mutable | Returns |\r\n|--------|-------------|---------|---------|\r\n| `add()` | Add multiple headers | ‚úÖ | `void` |\r\n| `set()` | Replace header values | ‚úÖ | `void` |\r\n| `get()` | Get first header value | ‚ùå | `string | undefined` |\r\n| `getAll()` | Get all header values | ‚ùå | `string[]` |\r\n| `has()` | Check existence | ‚ùå | `boolean` |\r\n| `delete()` | Remove header | ‚úÖ | `boolean` |\r\n| `append()` | Add header value | ‚úÖ | `void` |\r\n| `toObject()` | Serialize headers | ‚ùå | `Record` |\r\n\r\n---\r\n"
    },
    {
      "id": 20,
      "path": "static-file",
      "name": "Static File",
      "folder": ".",
      "content": "\r\n---\r\n\r\n# **`static()` - Serve Static Files Efficiently**  \r\n\r\n## **Overview**  \r\n\r\nThe `static()` method allows serving static files (HTML, CSS, JS, images, videos, fonts, etc.) from a specified directory. It supports defining a **base route** or directly serving from the **root (`/`)** while offering customizable options like caching and indexing.  \r\n\r\n## **Usage**  \r\n\r\n### **1Ô∏è‚É£ Serve Static Files from the Root (`/`)**  \r\n\r\n```typescript\r\napp.static(\"./public\");\r\n```\r\n\r\n- Serves files from the **\"public\"** directory.  \r\n- Example: A file `public/style.css` will be accessible at `http://yourdomain.com/style.css`.  \r\n\r\n### **2Ô∏è‚É£ Serve Static Files from a Specific Route**  \r\n\r\n```typescript\r\napp.static(\"/static\", \"./assets\");\r\n```\r\n\r\n- Serves files from the **\"assets\"** directory under `/static`.  \r\n- Example: `assets/logo.png` will be available at `http://yourdomain.com/static/logo.png`.  \r\n\r\n### **3Ô∏è‚É£ Serve Static Files with Options**  \r\n\r\n```typescript\r\napp.static(\"./public\", { \r\n    cacheControl: \"public, max-age=3600\", \r\n     });\r\n```\r\n\r\n- Enables HTTP caching with **Cache-Control headers**.  \r\n\r\n---\r\n\r\n## **Method Signature**\r\n\r\n```typescript\r\nstatic(route: string, folder: string, option?: StaticServeOption): this;\r\nstatic(folder: string, option?: StaticServeOption): this;\r\n```\r\n\r\n## **Parameters**\r\n\r\n| Parameter        | Type                         | Description |\r\n|-----------------|----------------------------|-------------|\r\n| `route` _(optional)_ | `string` | The base route to serve static files from (e.g., `/public`). If omitted, files are served from `/`. |\r\n| `folder` | `string` | The directory containing static files. |\r\n| `option` _(optional)_ | `StaticServeOption` | Additional options for static file serving. |\r\n\r\n---\r\n\r\n## **üìå Available Options (`StaticServeOption`)**\r\n\r\nThe `option` parameter allows configuring various settings for serving static files.\r\n\r\n| Option          | Type      | Default  | Description |\r\n|----------------|----------|----------|-------------|\r\n| `cacheControl` | `string` | `\"no-cache\"` | Controls HTTP caching for files. Example: `\"public, max-age=3600\"` for 1-hour caching. |\r\n| `header`         | `HeaderResponse` | `undefined` | Record of headers |\r\n\r\n---\r\n\r\n## **üîπ Example Implementations**\r\n\r\n### **1Ô∏è‚É£ Enable Cache-Control for Performance**\r\n\r\n```typescript\r\napp.static(\"./public\", { cacheControl: \"public, max-age=86400\" });  // 1-day caching\r\n```\r\n\r\n## **üöÄ Return Value**\r\n\r\nReturns the current instance (`this`), allowing **method chaining**:\r\n\r\n```typescript\r\napp.static(\"./public\").use(middlewareFunction);\r\n```\r\n\r\n---\r\n\r\n## **üìù Notes**\r\n\r\n- Automatically detects **MIME types** for proper `Content-Type` headers.  \r\n- Ensures **secure file path resolution** to prevent directory traversal attacks.  \r\n- Works seamlessly across **Node.js, Deno, and Bun** with minimal modifications.  \r\n- Supports both **absolute and relative** folder paths.  \r\n\r\n---\r\n\r\nThis **enhanced documentation** includes:  \r\n‚úÖ **Detailed parameter descriptions**  \r\n‚úÖ **Comprehensive options table**  \r\n‚úÖ **Real-world use cases**  \r\n‚úÖ **Security & performance best practices**  \r\n\r\n<https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control>\r\n\r\n## **You can Overwrite static path**\r\n\r\n```ts\r\nserver.get('/static/image.png',(ctx)=>{\r\n    //-------------\r\n    //------------- code \r\n    //-------------\r\n    //-------------\r\n})\r\n```\r\n"
    },
    {
      "id": 21,
      "path": "middlewares/cors-middleware",
      "name": "CORS Middleware",
      "folder": "Middlewares",
      "content": "\r\n---\r\n\r\n# CORS Middleware\r\n\r\n## **Overview**\r\n\r\nMiddleware for handling Cross-Origin Resource Sharing (CORS) headers. Supports dynamic origin validation, preflight requests, and granular control over allowed methods/headers.\r\n\r\n---\r\n\r\n## **Installation & Basic Usage**\r\n\r\n```typescript\r\nimport { cors } from 'tejx';\r\n\r\n// Basic setup (allow all origins)\r\napp.use(cors());\r\n\r\n// Advanced configuration\r\napp.use(cors({\r\n  origin: ['https://trusted.com', /\\.example\\.com$/],\r\n  methods: ['GET', 'POST'],\r\n  credentials: true\r\n}));\r\n```\r\n\r\n---\r\n\r\n## **Configuration Options (`CorsOptions`)**\r\n\r\n| Property          | Type                                      | Default                          | Description                                                                 |\r\n|-------------------|-------------------------------------------|----------------------------------|-----------------------------------------------------------------------------|\r\n| `origin`          | `string RegExp  (string RegExp)[]  ((origin: string) => boolean)` | `*` (allow all)            | Controls allowed origins                                                    |\r\n| `methods`         | `string[]`                                | `[\"GET\", \"POST\", \"PUT\", \"DELETE\"]` | HTTP methods allowed in CORS requests                                       |\r\n| `allowedHeaders`  | `string[]`                                | `[\"Content-Type\", \"Authorization\"]` | Headers clients can send                                                    |\r\n| `exposedHeaders`  | `string[]`                                | (none)                          | Headers exposed to client                                                   |\r\n| `credentials`     | `boolean`                                 | `false`                         | Allow cookies/credentials                                                   |\r\n| `maxAge`          | `number`                                  | (none)                          | Preflight cache duration in seconds                                         |\r\n\r\n---\r\n\r\n## **Detailed Behavior**\r\n\r\n### **1. Origin Handling**\r\n\r\n#### **Static Origin**\r\n\r\n```typescript\r\ncors({ origin: 'https://strict-domain.com' });\r\n```\r\n\r\n#### **Multiple Origins**\r\n\r\n```typescript\r\ncors({ \r\n  origin: [\r\n    'https://app.com',\r\n    'http://localhost:3000',\r\n    /\\.staging\\.com$/ // Regex support\r\n  ] \r\n});\r\n```\r\n\r\n#### **Dynamic Validation**\r\n\r\n```typescript\r\ncors({\r\n  origin: (requestOrigin) => {\r\n    return validateOriginAgainstDB(requestOrigin); // Async supported via ctx\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n### **2. Preflight Handling**\r\n\r\nAutomatically responds to `OPTIONS` requests:\r\n\r\n```http\r\nOPTIONS /resource HTTP/1.1\r\nOrigin: https://client.com\r\nAccess-Control-Request-Method: DELETE\r\nAccess-Control-Request-Headers: X-Custom-Header\r\n```\r\n\r\n**Response**:\r\n\r\n```http\r\nHTTP/1.1 204 No Content\r\nAccess-Control-Allow-Origin: https://client.com\r\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\r\nAccess-Control-Allow-Headers: X-Custom-Header\r\nAccess-Control-Max-Age: 86400\r\n```\r\n\r\n---\r\n\r\n### **3. Credential Handling**\r\n\r\nWhen enabled:\r\n\r\n```typescript\r\ncors({ credentials: true });\r\n```\r\n\r\nSets header:\r\n\r\n```http\r\nAccess-Control-Allow-Credentials: true\r\n```\r\n\r\n---\r\n\r\n## **Response Headers**\r\n\r\nThe middleware sets these headers automatically:\r\n\r\n| Header                           | Value Example                          |\r\n|----------------------------------|----------------------------------------|\r\n| `Access-Control-Allow-Origin`    | `https://trusted.com`                  |\r\n| `Access-Control-Allow-Methods`   | `GET, POST`                            |\r\n| `Access-Control-Allow-Headers`   | `Content-Type, Authorization`          |\r\n| `Access-Control-Expose-Headers`  | `X-Custom-Header`                      |\r\n| `Access-Control-Max-Age`         | `3600`                                 |\r\n| `Access-Control-Allow-Credentials` | `true`                               |\r\n\r\n---\r\n\r\n## **Advanced Examples**\r\n\r\n### **1. Per-Route CORS Configuration**\r\n\r\n```typescript\r\n// Apply to specific route\r\napp.get(\r\n  '/api/data',\r\n  cors({\r\n    origin: 'https://specific-client.com',\r\n    methods: ['GET']\r\n  }),\r\n  dataHandler\r\n);\r\n```\r\n\r\n### **2. Combining with Authentication**\r\n\r\n```typescript\r\napp.use(cors({\r\n  origin: 'https://app.com',\r\n  allowedHeaders: ['Authorization', 'X-API-Key'],\r\n  credentials: true\r\n}));\r\n\r\napp.use(authMiddleware); // Reads Authorization header\r\n```\r\n\r\n### **3. Long Cache Preflight**\r\n\r\n```typescript\r\ncors({\r\n  maxAge: 86400 // 24-hour cache\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Error Handling**\r\n\r\nThe middleware **does not** throw errors for invalid origins. Instead:\r\n\r\n- Sets empty `Access-Control-Allow-Origin` for invalid origins\r\n- Returns 204 for OPTIONS requests regardless of origin validity\r\n- Relies on browser enforcement of CORS policies\r\n\r\n**To implement strict blocking**:\r\n\r\n```typescript\r\napp.use(cors({\r\n  origin: (origin) => {\r\n    if (!isValid(origin)) {\r\n      throw new Error('Invalid origin'); // Will propagate\r\n    }\r\n    return origin;\r\n  }\r\n}));\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n1. **Avoid Wide Open CORS**  \r\n\r\n   ```typescript\r\n   // ‚ùå Dangerous in production\r\n   cors({ origin: '*' }); \r\n\r\n   // ‚úÖ Restrictive setup\r\n   cors({ origin: process.env.ALLOWED_ORIGINS });\r\n   ```\r\n\r\n2. **Limit Exposed Headers**  \r\n\r\n   ```typescript\r\n   cors({\r\n     exposedHeaders: ['X-RateLimit-Limit', 'X-RateLimit-Remaining']\r\n   });\r\n   ```\r\n\r\n3. **Use Credentials Sparingly**  \r\n\r\n   ```typescript\r\n   // Only enable when cookies/auth needed\r\n   cors({ credentials: true });\r\n   ```\r\n\r\n4. **Combine with Rate Limiting**  \r\n\r\n   ```typescript\r\n   app.use(rateLimiter());\r\n   app.use(cors());\r\n   ```\r\n\r\n---\r\n\r\n## **Regex-Specific Features**\r\n\r\n### **1. Regex Origin Patterns**\r\n\r\nMatch origins using regular expressions:\r\n\r\n```typescript\r\n// Allow all subdomains of example.com\r\ncors({ origin: /\\.example\\.com$/ });\r\n\r\n// Allow specific patterns\r\ncors({ origin: /https:\\/\\/app-(dev|staging)\\.com/ });\r\n```\r\n\r\n### **2. Mixed Array Support**\r\n\r\nCombine strings and regexes in the origin array:\r\n\r\n```typescript\r\ncors({\r\n  origin: [\r\n    'https://production.com',\r\n    /\\.staging\\.com$/,\r\n    'http://localhost:3000'\r\n  ]\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Matching Logic**\r\n\r\n### **Priority Order**\r\n\r\n1. **String Exact Match**  \r\n   `'https://exact-domain.com'`\r\n\r\n2. **Regex Pattern Test**  \r\n   `/\\.domain\\.com$/`\r\n\r\n3. **Array Membership Check**  \r\n   (Strings or regexes)\r\n\r\n4. **Function Validation**  \r\n   Custom logic\r\n\r\n### **Matching Flow**\r\n\r\n```js\r\ngraph TD\r\n    A[Request Origin] --> B{Is origin string?}\r\n    B -->|Yes| C[Exact match]\r\n    B -->|No| D{Is origin regex?}\r\n    D -->|Yes| E[Regex test]\r\n    D -->|No| F{Is array?}\r\n    F -->|Yes| G[Check array elements]\r\n    F -->|No| H{Is function?}\r\n    H -->|Yes| I[Function validation]\r\n```\r\n\r\n---\r\n\r\n## **Examples**\r\n\r\n### **1. Regex Origin Validation**\r\n\r\n```typescript\r\n// Allow all subdomains and local development\r\ncors({\r\n  origin: [\r\n    /\\.company\\.com$/,\r\n    /localhost:\\d+/,\r\n    'https://partner-site.com'\r\n  ]\r\n});\r\n```\r\n\r\n### **2. Dynamic Regex Generation**\r\n\r\n```typescript\r\nconst dynamicOrigins = [\r\n  new RegExp(`${process.env.ALLOWED_SUBDOMAINS_REGEX}`),\r\n  process.env.PRIMARY_DOMAIN\r\n];\r\n\r\napp.use(cors({ origin: dynamicOrigins }));\r\n```\r\n\r\n### **3. Regex + Function Combination**\r\n\r\n```typescript\r\ncors({\r\n  origin: (origin) => {\r\n    const isLocal = /localhost:\\d+/.test(origin);\r\n    return isLocal || someOtherCheck(origin);\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Special Cases**\r\n\r\n### **Regex Edge Handling**\r\n\r\n```typescript\r\n// Match exact domain with regex\r\ncors({ origin: /^https:\\/\\/exact\\.com$/ }); \r\n\r\n// Allow HTTP and HTTPS\r\ncors({ origin: /^https?:\\/\\/app\\.com$/ });\r\n```\r\n\r\n### **Port Matching**\r\n\r\n```typescript\r\n// Allow any localhost port\r\ncors({ origin: /http:\\/\\/localhost:\\d+/ });\r\n```\r\n\r\n---\r\n\r\n## **Security Considerations**\r\n\r\n1. **Anchored Patterns**  \r\n   Always anchor regexes to prevent partial matches:\r\n\r\n   ```typescript\r\n   // ‚ùå Vulnerable to \"evil-example.com\"\r\n   /example\\.com/ \r\n\r\n   // ‚úÖ Secure match\r\n   /^https:\\/\\/.*\\.example\\.com$/\r\n   ```\r\n\r\n2. **Escape Special Characters**  \r\n\r\n   ```typescript\r\n   const domain = 'special.domain.com';\r\n   const escaped = domain.replace(/\\./g, '\\\\.');\r\n   new RegExp(`^https://${escaped}$`);\r\n   ```\r\n\r\n3. **Combine with Allow Lists**  \r\n\r\n   ```typescript\r\n   const allowed = loadFromDB(); // ['trusted.com', ...]\r\n   cors({ origin: allowed.concat([/\\.safe-domain\\.com$/]) });\r\n   ```\r\n\r\n---\r\n\r\n## **Debugging Tips**\r\n\r\n### **Test Regex Patterns**\r\n\r\n```typescript\r\nconst testOrigin = \"https://app.staging.com\";\r\nconst regex = /\\.staging\\.com$/;\r\nconsole.log(regex.test(testOrigin)); // true\r\n```\r\n\r\n### **Log Matched Origins**\r\n\r\n```typescript\r\napp.use((ctx, next) => {\r\n  console.log('CORS Origin:', ctx.headers.get('origin'));\r\n  return next();\r\n});\r\n```\r\n\r\n---\r\n\r\n## **API Reference**\r\n\r\n### **cors(options?: CorsOptions)**\r\n\r\n**Returns:** Middleware function\r\n\r\n**Flow:**\r\n\r\n1. Validates request origin\r\n2. Sets CORS response headers\r\n3. Short-circuits OPTIONS requests\r\n4. Proceeds to next middleware for non-OPTIONS\r\n\r\n---\r\n"
    },
    {
      "id": 22,
      "path": "helpers/load-environment",
      "name": "Load Environment‚ù§Ô∏è‚Äçüî•",
      "folder": "Helpers",
      "content": "\r\n---\r\n\r\n## **Core Components**\r\n\r\n### **1. `loadEnv(basePath?: string)`**\r\n\r\n**Purpose:** Loads environment variables from `.env` files  \r\n**Parameters:**\r\n\r\n- `basePath` (optional): Directory containing `.env` files (default: current working directory)\r\n\r\n**Supported Files:**\r\n\r\n```js\r\n.env                # Base environment\r\n.env.local          # Local overrides\r\n.env.[mode]         # Environment-specific (e.g., .env.production)\r\n.env.[mode].local   # Mode-specific local overrides\r\n```\r\n\r\n**Return Type:**  \r\n\r\n```typescript\r\ninterface EnvVariables {\r\n  [key: string]: string;\r\n  NODE_ENV: 'development' | 'production' | 'test';\r\n  PORT?: string;\r\n  API_KEY?: string;\r\n  // ... other variables\r\n}\r\n```\r\n\r\n**Example:**\r\n\r\n```typescript\r\n// Load from specific directory\r\nconst env = loadEnv('./config');\r\n\r\n// Access variables\r\nconst port = env.PORT || '3000';\r\n```\r\n\r\n---\r\n\r\n### **2. `CustomContext` Interface**\r\n\r\n**Extends base context with application-specific properties:**\r\n\r\n```typescript\r\ninterface CustomContext {\r\n  user?: {\r\n    id: string;\r\n    roles: string[];\r\n  };\r\n  requestId: string;\r\n  // Add custom properties as needed\r\n}\r\n```\r\n\r\n**Usage in Middleware:**\r\n\r\n```typescript\r\nserver.use(async (ctx, next) => {\r\n  ctx.requestId = crypto.randomUUID();\r\n  ctx.user = await authenticate(ctx.headers.get('Authorization'));\r\n  return await next();\r\n});\r\n```\r\n\r\n---\r\n\r\n### **3. Server Initialization**\r\n\r\n**Type-Safe Configuration:**\r\n\r\n```typescript\r\nconst server = new Accelero<CustomContext>({\r\n  env: loadEnv(),\r\n  // Other options\r\n});\r\n```\r\n\r\n**Configuration Options:**\r\n\r\n| Option | Type | Default | Description |\r\n|--------|------|---------|-------------|\r\n| `env` | `EnvVariables` | `process.env` or `Deno.env` | Environment variables container |\r\n\r\n---\r\n\r\n## **Complete Workflow Example**\r\n\r\n### **1. Basic Setup**\r\n\r\n```typescript\r\n// Load environment variables\r\nconst env = loadEnv();\r\n\r\n// Initialize server\r\nconst server = new Accelero({\r\n  env,\r\n  logger: logger\r\n});\r\n\r\n// Access env in middleware\r\nserver.use((ctx) => {\r\n  if (ctx.env.API_KEY !== 'expected') {\r\n    ctx.status(401).text('Unauthorized');\r\n  }\r\n});\r\n```\r\n\r\n### **2. Advanced Context Usage**\r\n\r\n```typescript\r\ninterface AppContext {\r\n  user?: UserProfile;\r\n  requestId: string;\r\n  analytics: AnalyticsTracker;\r\n}\r\n\r\nconst server = new Accelero<AppContext>({\r\n  env: loadEnv('./env'),\r\n});\r\n\r\n// Middleware to extend context\r\nserver.use(async (ctx, next) => {\r\n  ctx.analytics = new Analytics(ctx.env.ANALYTICS_KEY);\r\n  ctx.analytics.flush();\r\n  return await next();\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Environment Management**\r\n\r\n```typescript\r\n// .env.production\r\nNODE_ENV=production\r\nPORT=443\r\nAPI_KEY=prod_abcdef\r\n\r\n// .env.development\r\nNODE_ENV=development\r\nPORT=3000\r\nAPI_KEY=dev_123456\r\n```\r\n\r\n### **2. Security**\r\n\r\n```text\r\n# .gitignore\r\n.env.local\r\n.env.*.local\r\n```\r\n\r\n---\r\n\r\n**Example:**\r\n\r\n```typescript\r\nif (env.DEBUG) enableDebugging();\r\n```\r\n\r\n---\r\n"
    },
    {
      "id": 23,
      "path": "helpers/logger",
      "name": "Logger‚ù§Ô∏è‚Äçüî•",
      "folder": "Helpers",
      "content": "\r\nThe JetCore logger provides a flexible logging system that integrates with request/response cycles and supports custom log levels. It follows the **LoggerFnType** interface for structured logging.\r\n\r\n---\r\n\r\n## **Quick Start**\r\n\r\n### **Basic Setup**\r\n\r\n```typescript\r\nimport { JetCore } from \"jet-core\";\r\nimport { loadEnv } from \"./config\";\r\n\r\nconst logger = () => ({\r\n  info: (msg) => console.log(`[INFO] ${msg}`),\r\n  error: (msg) => console.error(`[ERROR] ${msg}`)\r\n});\r\n\r\nconst server = new JetCore({\r\n  logger: logger,\r\n  env: loadEnv()\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Logger Configuration**\r\n\r\n### **LoggerFnType Interface**\r\n\r\n```typescript\r\ntype LoggerFnType = () => {\r\n  request?: (method: HTTPMethod, pathname: string) => void;\r\n  response?: (method: HTTPMethod, pathname: string, status?: number) => void;\r\n  info?: (msg: string, ...args: unknown[]) => void;\r\n  warn?: (msg: string, ...args: unknown[]) => void;\r\n  error?: (msg: string, ...args: unknown[]) => void;\r\n  debug?: (msg: string, ...args: unknown[]) => void;\r\n  success?: (msg: string, ...args: unknown[]) => void;\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Core Methods**\r\n\r\n### **1. Request/Response Tracking**\r\n\r\n| Method | Parameters | Description |\r\n|--------|------------|-------------|\r\n| `request` | `method`, `pathname` | Logs incoming requests |\r\n| `response` | `method`, `pathname`, `status` | Logs completed responses |\r\n\r\n**Example:**\r\n\r\n```typescript\r\nconst logger = () => ({\r\n  request: (method, path) => {\r\n    console.log(`‚ûî ${method} ${path}`);\r\n  },\r\n  response: (method, path, status) => {\r\n    console.log(`‚Üê ${status} ${method} ${path}`);\r\n  }\r\n});\r\n```\r\n\r\n### **2. Log Levels**\r\n\r\n| Method | Use Case | Example Output |\r\n|--------|----------|----------------|\r\n| `info` | General information | `[INFO] Server started on port 3000` |\r\n| `warn` | Non-critical issues | `[WARN] High memory usage detected` |\r\n| `error` | Critical errors | `[ERROR] Database connection failed` |\r\n| `debug` | Debugging details | `[DEBUG] Route matched: /api/users` |\r\n| `success` | Positive outcomes | `[SUCCESS] User created: ID-123` |\r\n\r\n---\r\n\r\n## **Advanced Configuration**\r\n\r\n### **Environment-Based Logging**\r\n\r\n```typescript\r\nconst logger = () => {\r\n  const isProduction = process.env.NODE_ENV === 'production';\r\n  \r\n  return {\r\n    debug: isProduction ? undefined : (msg) => console.debug(msg),\r\n    info: (msg) => console.info(msg),\r\n    error: (msg) => console.error(msg)\r\n  };\r\n};\r\n```\r\n\r\n### **Custom Log Format**\r\n\r\n```typescript\r\nconst logger = () => ({\r\n  info: (msg, ...args) => {\r\n    const timestamp = new Date().toISOString();\r\n    console.log(`[${timestamp}] INFO: ${msg}`, ...args);\r\n  },\r\n  error: (msg, ...args) => {\r\n    const timestamp = new Date().toISOString();\r\n    console.error(`[${timestamp}] ERROR: ${msg}`, ...args);\r\n  }\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Integration Examples**\r\n\r\n### **Third-Party Integration (Winston)**\r\n\r\n```typescript\r\nimport winston from 'winston';\r\n\r\nconst logger = () => {\r\n  const winstonLogger = winston.createLogger({/* config */});\r\n  \r\n  return {\r\n    info: (msg) => winstonLogger.info(msg),\r\n    error: (msg) => winstonLogger.error(msg),\r\n    debug: (msg) => winstonLogger.debug(msg)\r\n  };\r\n};\r\n```\r\n\r\n---\r\n\r\n## **Best Practices**\r\n\r\n### **1. Production Configuration**\r\n\r\n```typescript\r\nconst prodLogger = () => ({\r\n  info: (msg) => console.log(msg),\r\n  error: (msg) => console.error(msg),\r\n  warn: (msg) => console.warn(msg)\r\n});\r\n```\r\n\r\n### **2. Performance Considerations**\r\n\r\n```typescript\r\n// Only enable debug logs when needed\r\nconst logger = () => ({\r\n  debug: process.env.DEBUG_MODE \r\n    ? (msg) => console.debug(msg)\r\n    : undefined\r\n});\r\n```\r\n\r\n---\r\n\r\n## **Troubleshooting**\r\n\r\n### **Common Issues**\r\n\r\n| Symptom | Solution |\r\n|---------|----------|\r\n| Logs not appearing | Ensure method is implemented in logger config |\r\n| Missing request/response logs | Verify `request`/`response` methods are defined |\r\n| Performance impact | Disable debug logs in production |\r\n\r\n---\r\n"
    },
    {
      "id": 24,
      "path": "examples/uploader",
      "name": "Uploader",
      "folder": "Examples",
      "content": "```ts\r\nimport { join } from 'path';\r\nimport { writeFile } from 'fs/promises';\r\n\r\nserver.post('/data', async (ctx) => {\r\n    const formData = await ctx.req.formData();\r\n    const file = formData?.files as File; // Extract the file from FormData\r\n\r\n    if (!file) {\r\n        return ctx.json({ error: \"No file uploaded\" }, 400);\r\n    }\r\n\r\n    try {\r\n        const buffer = await file.arrayBuffer(); // Convert File to ArrayBuffer\r\n        const filePath = join(process.cwd(), 'uploads', file.name); // Define file path\r\n\r\n        await writeFile(filePath, Buffer.from(buffer)); // Save file\r\n\r\n        return ctx.json({ \r\n            message: \"File uploaded successfully\", \r\n            path: filePath \r\n        });\r\n    } catch (error: any) {\r\n        return ctx.json({ \r\n            error: \"File save failed\", \r\n            details: error.message \r\n        }, 500);\r\n    }\r\n});\r\n```\r\n"
    }
  ]
}